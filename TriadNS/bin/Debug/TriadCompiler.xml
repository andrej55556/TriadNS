<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TriadCompiler</name>
    </assembly>
    <members>
        <member name="T:TriadCompiler.IConditionCodeBuilder">
            <summary>
            ��������� ���� ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.IConditionCodeBuilder.doCheckMethod">
            <summary>
            �����, ����������� ������� ��������� �������������
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.CreateDoCheckMethod">
            <summary>
            ������� �����, ����������� ������� ��������� �������������
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.SetDoCheckMethod(System.CodeDom.CodeStatementCollection)">
            <summary>
            ������ ��������� � ������, ����������� ������� ��������� �������������
            </summary>
            <param name="statList">������ ����������</param>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.AddVarDefinition(TriadCompiler.IExprType,System.CodeDom.CodeExpression)">
            <summary>
            �������� ���������� ���������� c ��������������
            </summary>
            <param name="varType">��� ����������</param>
            <param name="initExpression">��� �������������</param>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.Reload">
            <summary>
            ������������� ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateRegisterSpyObjectMethod">
            <summary>
            ������� �����, �������������� ��� spy-�������
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateGetOutVarMethod">
            <summary>
            ������� �����, ������������ ��� out-����������
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateDoProcessingMethod">
            <summary>
            ������� �����, ������������ �������� ��
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateDoHandlingMethod">
            <summary>
            ������� �����, �������������� ��������� spy-��������
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddSpyObject(TriadCompiler.ISpyType)">
            <summary>
            �������� spy-������
            </summary>
            <param name="spyObjectType">��� spy-�������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddProperty(TriadCompiler.IExprType)">
            <summary>
            �������� �������� ��� �������, ��������� �� ����������
            </summary>
            <param name="spyVarType">������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddRegisterSpyObjectMethod(TriadCompiler.ISpyType)">
            <summary>
            �������� �����, �������������� ���� spy-������
            </summary>
            <param name="spyObjectType">��� spy-�������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddSpyHandler(TriadCompiler.ISpyType)">
            <summary>
            �������� �����, �������������� ���������� ��������� ������� ��������
            </summary>
            <param name="spyObjectType">��� ������� ��������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddOutVariable(TriadCompiler.IExprType)">
            <summary>
            �������� out-����������
            </summary>
            <param name="varType">��� ����������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.SetIPResultType(TriadCompiler.IExprType)">
            <summary>
            ������ ��� ��������, ������������ ��
            </summary>
            <param name="varType">��� ��������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.SetDoProcessing(System.CodeDom.CodeStatementCollection)">
            <summary>
            ������ ��������� � ������ processing
            </summary>
            <param name="statList">������ ����������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.SetDoHandling(System.CodeDom.CodeStatementCollection)">
            <summary>
            ������ ��������� � ������ handling
            </summary>
            <param name="statList">������ ����������</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.Reload">
            <summary>
            ������������� ��������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.registerSpyObjectsMethod">
            <summary>
            ����� �������������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.getOutVarMethod">
            <summary>
            �����, ������������ ��� out-����������
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.doProcessingMethod">
            <summary>
            �����, ������������ �������� ��
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.doHandlingMethod">
            <summary>
            �����, �������������� ��������� spy-��������
            </summary>
        </member>
        <member name="T:TriadCompiler.EmptySetType">
            <summary>
            Тип пустого мн-ва
            </summary>
        </member>
        <member name="M:TriadCompiler.EmptySetType.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="T:TriadCompiler.SetType">
            <summary>
            Тип множества
            </summary>
        </member>
        <member name="F:TriadCompiler.SetType.setName">
            <summary>
            Имя множества
            </summary>
        </member>
        <member name="F:TriadCompiler.SetType.code">
            <summary>
            Код типа элементов множества
            </summary>
        </member>
        <member name="F:TriadCompiler.SetType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.SetType.#ctor(TriadCompiler.TypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа элементов множества</param>
        </member>
        <member name="M:TriadCompiler.SetType.#ctor(TriadCompiler.TypeCode,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа элементов множества</param>
            <param name="setName">Имя множества</param>
        </member>
        <member name="P:TriadCompiler.SetType.Code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.SetType.Name">
            <summary>
            Имя переменной переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.SetType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.SetType.Clone">
            <summary>
            Продублировать тип
            </summary>
            <returns>Дубль</returns>
        </member>
        <member name="T:TriadCompiler.BitStringValue">
            <summary>
            Дочерний класс, предназначенный для хранения битовых строковых значений.
            </summary>
        </member>
        <member name="F:TriadCompiler.BitStringValue.BitStringInvertConst">
            <summary>
            Константа для инвертирования битовых строк
            </summary>
        </member>
        <member name="M:TriadCompiler.BitStringValue.#ctor(System.Int64)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="P:TriadCompiler.BitStringValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="M:TriadCompiler.BitStringValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.BitStringValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="T:TriadCompiler.BooleanValue">
            <summary>
            Дочерний класс, предназначенный для хранения логических значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.BooleanValue.#ctor(System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="P:TriadCompiler.BooleanValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="M:TriadCompiler.BooleanValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.BooleanValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="T:TriadCompiler.CharValue">
            <summary>
            Дочерний класс, предназначенный для хранения символьных значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.CharValue.#ctor(System.Char)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="P:TriadCompiler.CharValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="M:TriadCompiler.CharValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="T:TriadCompiler.ConstValue">
            <summary>
            ������������ �����, ��������������� ��� �������� � ���������� ����������� ���������.
            </summary>
        </member>
        <member name="M:TriadCompiler.ConstValue.#ctor">
            <summary>
            	<para> ����������� ������ <see cref="T:TriadCompiler.ConstValue"/> .</para>
            </summary>
        </member>
        <member name="P:TriadCompiler.ConstValue.IsConstant">
            <summary>
            �������� ����, �������� �� �������� ����������
            </summary>
            <returns>true - ���� ��� ���������</returns>
        </member>
        <member name="M:TriadCompiler.ConstValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            ���������� ���������� �� ������� �������� relationOperation � ������� ����������
            </summary>
            <param name="operation">��� ��������</param>
            <returns>��������� �������� ����������</returns>
        </member>
        <member name="M:TriadCompiler.ConstValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            ���������� ���������� �� �������� relationOperation � ������� � ���������� ����������
            ��������� ����� �������� � ������� ��������
            </summary>
            <param name="operation">��� ��������</param>
            <param name="operand">������ ������� (������ - this)</param>
            <returns>��������� �������� ����������</returns>
        </member>
        <member name="F:TriadCompiler.ConstValue.isConstant">
            <summary>
            ��������� ����, ��� �������� - ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.IntegerValue">
            <summary>
            Дочерний класс, предназначенный для хранения целых значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.IntegerValue.#ctor(System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="P:TriadCompiler.IntegerValue.Value">
            <summary> 
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="M:TriadCompiler.IntegerValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.IntegerValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary> 
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="T:TriadCompiler.NilValue">
            <summary>
            Вычисление выражений с nil
            </summary>
        </member>
        <member name="M:TriadCompiler.NilValue.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.NilValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Обработать двуместную операцию
            </summary>
            <param name="operation">Операция</param>
            <param name="operand">Второй операнд</param>
            <returns>Результат</returns>
        </member>
        <member name="T:TriadCompiler.RealValue">
            <summary>
            Дочерний класс, предназначенный для хранения вещественных значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.RealValue.#ctor(System.Double)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="P:TriadCompiler.RealValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение
            </returns>
        </member>
        <member name="M:TriadCompiler.RealValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.RealValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="T:TriadCompiler.SetValue">
            <summary>
            Вычисление выражений над множествами
            </summary>
        </member>
        <member name="F:TriadCompiler.SetValue.set">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="M:TriadCompiler.SetValue.#ctor(System.Object[])">
            <summary>
            Конструктор
            </summary>
            <param name="valueList">Элементы множества</param>
        </member>
        <member name="M:TriadCompiler.SetValue.#ctor(TriadCore.Set)">
            <summary>
            Конструктор
            </summary>
            <param name="set">Начальное множество</param>
        </member>
        <member name="P:TriadCompiler.SetValue.Value">
            <summary> 
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="M:TriadCompiler.SetValue.AddValue(TriadCompiler.ConstValue)">
            <summary>
            Добавить элемент в мн-во
            </summary>
            <param name="value">Значение добавляемого элемента</param>
        </member>
        <member name="M:TriadCompiler.SetValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Выполнить бинарную операцию
            </summary>
            <param name="operation">Код операции</param>
            <param name="operand">Второе множество</param>
            <returns>Итоговое множество</returns>
        </member>
        <member name="T:TriadCompiler.StringValue">
            <summary>
            Дочерний класс, предназначенный для хранения строковых значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.StringValue.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="P:TriadCompiler.StringValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="M:TriadCompiler.StringValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Const.ConstantSet">
            <summary>
            Константное множество
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Const.ConstantSet.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Константное множество
            </summary>
            <syntax>[ { Constant { , Constant } } ]</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информация о константе</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Const.Constant">
            <summary>
            ������ �������������� ��������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Const.Constant.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������
            </summary>
            <syntax>StringValue | CharValue | IntegerValue | RealValue | BitStringValue</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>���������� � ���������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Add.Addend">
            <summary>
            ������ ���������� � �������������� ���������
            </summary>
            <summary>
            �������� ����� ��� ���������� � �������������� ���������
            </summary>
            <summary>
            ��������� ���� ��� ���������� � �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.Add.Addend.multSet">
            <summary>
            ��������� �������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.Add.Addend.MultKeys">
            <summary>
            ��������� �������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Add.Addend.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������
            </summary>
            <syntax>Factor {MULT_OP Factor}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>���������� � ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Add.Addend.CheckTypeInFactor(TriadCompiler.IExprType,TriadCompiler.IExprType,TriadCompiler.Key)">
            <summary>
            ��������� ������������� ����� �� ������ Factor
            </summary>
            <param name="prevType">����������� ���</param>
            <param name="nextType">����������� ���</param>
            <param name="operation">��� ��������</param>
            <returns>�������������� ��� ����� ���������� ��������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Add.Addend.BuildStringCodeForAddend(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Key)">
            <summary>
            ��������� ���� � ���������
            </summary>
            <param name="info">���������� � ���� ���������</param>
            <param name="nextFactorInfo">���������� � ������� ���������</param>
            <param name="multiplierOperation">�������� ���������</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Fact.Factor">
            <summary>
            ��������� ���� ��� ��������� � �������������� ���������
            </summary>
            <summary>
            ������ ��������� � �������������� ���������
            </summary>
            <summary>
            �������� ����� ��� ��������� � �������������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.BuildStringCodeForNotFactor(TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            ������������� ��������� ������������� ��� ��������� ���������
            </summary>
            <param name="info">���������� � ���������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.BuildStringCodeForFactor(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            ������������� ��������� ������������� ��� ���������
            </summary>
            <param name="info">���������� � ���� ���������</param>
            <param name="nextSimpleFactorInfo">���������� � ������� ������� ���������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������
            </summary>
            <syntax>Not Factor | SimpleFactor {Power SimpleFactor}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>���������� � ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.CheckTypeInNotFactor(TriadCompiler.IExprType)">
            <summary>
            ������������� ����� � �������� not
            </summary>
            <param name="type">����������� ���</param>
            <returns>�������������� ��� ����� ���������� ��������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.CheckTypeInSimpleFactor(TriadCompiler.IExprType,TriadCompiler.IExprType)">
            <summary>
            ������������� ����� �� ������ SimpleFactor
            </summary>
            <param name="prevType">����������� ���</param>
            <param name="nextType">����������� ���</param>
            <returns>�������������� ��� ����� ���������� ��������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression">
            <summary>
            ������ �������� ��������� � �������������� ���������
            </summary>
            <summary>
            �������� ����� ��� �������� ��������� � �������������� ���������
            </summary>
            <summary>
            ��������� ���� ��� �������� �������� � �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.addSet">
            <summary>
            ��������� �������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.AddKeys">
            <summary>
            ��������� �������� ��������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ������� ���������
            </summary>
            <syntax>[-]Addend {ADD_OP Addend}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.CheckTypeInAddend(TriadCompiler.IExprType,TriadCompiler.IExprType,TriadCompiler.Key)">
            <summary>
            ������������� ����� �� ������ Addend
            </summary>
            <param name="prevType">����������� ���</param>
            <param name="nextType">����������� ���</param>
            <param name="operation">��� ��������</param>
            <returns>�������������� ��� ����� ���������� ��������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.CheckTypeInMinusAddend(TriadCompiler.IExprType)">
            <summary>
            ������������� ����� � �������� minus
            </summary>
            <param name="type">����������� ���</param>
            <returns>�������������� ��� ����� ���������� ��������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.BuildStringCodeForSimpleExpression(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Key)">
            <summary>
            ��������� ���� � ������� ���������
            </summary>
            <param name="info">���������� � ���� ������� ���������</param>
            <param name="nextAddendInfo">���������� � ������� ���������</param>
            <param name="addendOperation">�������� ��������</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor">
            <summary>
            ������ �������� ��������� � �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.simpleFactorSet">
            <summary>
            ��������� ��������� �������� �������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.constantSet">
            <summary>
            ��������� ��������� �������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.SimpleFactorStartKeys">
            <summary>
            ��������� ������� �������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.ConstantStartKeys">
            <summary>
            ��������� ������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ������� ���������
            </summary>
            <syntax>Constant | Variable | ( Expression )</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <returns>���������� � ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.TypeCast(TriadCompiler.EndKeyList)">
            <summary>
            ���������� �����
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <returns>���������� � ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.CheckCastTypes(TriadCompiler.VarType,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            ���������
            </summary>
            <param name="castType">���, � �������� ����� ��������</param>
            <param name="exprInfo">�������� ���������</param>
            <returns>True, ���� ���������� ���������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Expression">
            <summary>
            ������ �������������� ���������
            </summary>
            <summary>
            ��������� ���� ��� �������������� ���������
            </summary>
            <summary>
            ������������� �������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.Expression.relationSet">
            <summary>
            ��������� �������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.Expression.RelationKeys">
            <summary>
            ��������� �������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Expression.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������
            </summary>
            <syntax>SimpleExpression [REL_OP SimpleExpression]</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>��������� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Expression.BuildStringCodeForExpression(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Key,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            ��������� ���������� ������������� ���������
            </summary>
            <param name="info">������ � ����� ������� ���������</param>
            <param name="relationOperation">�������� ���������</param>
            <param name="rightSimpleExprInfo">������ � ������ ������� ���������</param>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.Expression.relationOpTypeSet">
            <summary>
            ��������� ���������� ����� � ��������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.Expression.RelOpTypes">
            <summary>
            ���������� ���� � ��������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Expression.CheckTypeInSimpleExpression(TriadCompiler.IExprType,TriadCompiler.IExprType,TriadCompiler.Key)">
            <summary>
            ������������� ����� �� ������ SimpleExpression
            Notype ��������� � ����� �����
            </summary>
            <param name="prevType">����������� ���</param>
            <param name="nextType">����������� ���</param>
            <param name="operation">��� ��������</param>
            <returns>�������������� ��� ����� ���������� ��������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.ExprInfo">
            <summary>
            ���������� � ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.ExprInfo.Value">
            <summary>
            �������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.ExprInfo.Type">
            <summary>
            ��� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.ExprInfo.strCode">
            <summary>
            ��������� �������������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.ExprInfo.HasNoError">
            <summary>
            ������� ����, ��� ��������� ���� ��������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.ExprInfo.StrCode">
            <summary>
            ��������� �������������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.Append(System.String)">
            <summary>
            �������� ����� ���������� �������������
            </summary>
            <param name="newCode">����� �����</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.InsertFirst(System.String)">
            <summary>
            �������� ����� ����� ���� � ������
            </summary>
            <param name="newCode">����� ����� ����</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.Replace(System.String,System.String)">
            <summary>
            �������� ����� ���������� ���� ������ ����������
            </summary>
            <param name="oldSubStr">������ ��������</param>
            <param name="newSubStr">����� ��������</param>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.ExprInfo.Code">
            <summary>
            ������������� � ���� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsNotIndexed">
            <summary>
            ���������, ��� ��������� ����� ����������������� ���
            </summary>
            <returns>True, ���� ����������������� ���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsNotSet">
            <summary>
            ���������, ��� ��������� ����� ��� �� ���������
            </summary>
            <returns>True, ���� ��� �� ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsIndexedOrSet">
            <summary>
            ���������, ��� ��������� ����� ��� ������ ��� ���������
            </summary>
            <returns>True, ���� ��� ��������� ������ ��� ��-��</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsInteger">
            <summary>
            ���������, ��� ��������� ����� ����� ���
            </summary>
            <returns>True, ���� �����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsIntegerOrReal">
            <summary>
            ���������, ��� ��������� ����� ����� ��� ������������ ���
            </summary>
            <returns>True, ���� ����� ��� ������������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsString">
            <summary>
            ���������, ��� ��������� ����� ��������� ���
            </summary>
            <returns>True, ���� ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsBoolean">
            <summary>
            ���������, ��� ��������� ����� ���������� ���
            </summary>
            <returns>True, ���� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsConstant">
            <summary>
            ���������, ��� ��������� - ��� ���������
            </summary>
            <returns>True, ���� ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsNotConstant">
            <summary>
            ���������, ��� ��������� - ��� �� ���������
            </summary>
            <returns>True, ���� �� ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.NotNegativeIntegerOrReal">
            <summary>
            ���������, ��� ���� ��������� - ���������, �� ��� ��������������� �����
            </summary>
            <returns>True, ���� ��� �����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.PositiveIntegerOrReal">
            <summary>
            ���������, ��� ���� ��������� - ���������, �� ��� ������������� �����
            </summary>
            <returns>True, ���� ��� �����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration">
            <summary>
            ����� ���������� ���� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.typeSet">
            <summary>
            ��������� ��������� �������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.simpleTypeSet">
            <summary>
            ��������� ��������� �������� �������� ����
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.SimpleTypeStartKeys">
            <summary>
            ��������� ������� �������� ����
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.TypeStartKeys">
            <summary>
            ��������� ������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���
            </summary>
            <syntax>SimpleType | Array [ ArrayIndexRange { ,ArrayIndexRange } ] Of SimpleType |
            SET OF SimpleType </syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>�������������� ���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.RangeDeclaration(TriadCompiler.EndKeyList,TriadCompiler.IndexedType)">
            <summary>
            ���������� ��������� � �������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="arrayType">����������� ��� �������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.ArrayIndex(TriadCompiler.EndKeyList,TriadCompiler.IndexedType)">
            <summary>
            �������� �������� ������� � �������
            </summary>
            <syntax>Expression</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="arrayType">�������������� ���</param>
            <syntax> Expression </syntax>
            <returns>������� ������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.CheckIndexInArrayDeclaration(TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            ��������� ������ � ���������� �������
            </summary>
            <param name="exprInfo">���������� �� �������</param>
            <returns>True, ���� ������� ������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.SimpleType(TriadCompiler.EndKeyList)">
            <summary>
            ������� ���
            </summary>
            <syntax>Bit | String | Char | Integer | Real | Boolean | Notype</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>�������������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration">
            <summary>
            ������ ���������� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.Parse(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            ���������� ����������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">���������</param>
            <returns>���� ����������� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������� ���������� � ��������������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>������� ���->��� �������������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.VarName(TriadCompiler.EndKeyList,TriadCompiler.IExprType,System.Boolean,TriadCompiler.VarDeclarationContext)">
            <summary>
            ������ ����� ���������� � �� ����������
            </summary>
            <syntax>IDentificator</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <param name="varType">��� ���� ���������� � ����������</param>
            <param name="registerType">������������� ����������� ����</param>
            <param name="context">�������� ����������</param>
            <returns>��� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.PolusDeclarationParse(TriadCompiler.EndKeyList,System.String)">
            <summary>
             ������ ���������� ������� � ���������� �������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="nodeVarName">��� �������, ���� �������� ������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.DeclarationWithRegistration(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            ������� ���������� ����������
            </summary>
            <syntax>Type Identificator {,Identificator}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">��������</param>
            <returns>������ ����� ����������� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.DeclarationWithOutRegistration(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            ���������� ���������� ��� ����������� �� ����
            </summary>
            <syntax>Type #Identificator {,Identificator}#</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">��������� ����������</param>
            <returns>������ ����� ����������� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Event.EventDeclaration.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            ���������� �������
            </summary>
            <syntax>Identificator {,Identificator}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="isSpyObject">������� spy-��������</param>
            <returns>������ ����� ����������� �������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Event.EventDeclaration.EventName(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            ������ ����� ������� � ����������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="isSpyObject">������� spy-�������</param>
            <returns>��� �������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration">
            <summary>
            ������ ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.startKeys">
            <summary>
            ��������� ��������� �������� ���������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.StartKeys">
            <summary>
            ��������� ������� ���������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            ���������� �������
            </summary>
            <syntax>Input | Output | InOut PolusNameInDeclaration {,PolusNameInDeclaration}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="isSpyObject">������� spy-�������</param>
            <returns>������ ����� ����������� �������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.PolusName(TriadCompiler.EndKeyList,System.Boolean,System.Boolean)">
            <summary>
            ��� ������
            </summary>
            <syntax>Identificator # RangeDeclaration #</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="isInput">��� ������� �����</param>
            <param name="isOutput">��� �������� �����</param>
            <returns>��� ������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Foreach">
            <summary>
            Оператор перебора элементов в мн-ве
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.Foreach.invokeCount">
            <summary>
            Число вызовов разбора оператора
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Foreach.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Разбор оператора
            </summary>
            <syntax>Foreach Variable In Expression Do StatementList EndF</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Foreach.GenerateCode(TriadCompiler.Parser.Common.Var.VarInfo,TriadCompiler.Parser.Common.Expr.ExprInfo,System.CodeDom.CodeStatementCollection)">
            <summary>
            Сгенерировать код
            </summary>
            <param name="varInfo">Описание переменной-счетчика</param>
            <param name="exprInfo">Описание множества</param>
            <param name="internalStatList">Список внутренних операторов</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Foreach.GetEnumeratorName">
            <summary>
            Получить имя счетчика
            </summary>
            <returns></returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.AssignContext">
            <summary>
            �������� ������ ��������� ������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.AssignContext.Routine">
            <summary>
            � ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.AssignContext.Common">
            <summary>
            ���-�� ���
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Assignement">
            <summary>
            ������ ��������� ������������ ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Assignement.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.AssignContext)">
            <summary>
            �������� ������������
            </summary>
            <syntax>Variable := Expression</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">�������� ������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Assignement.CheckVarTypes(TriadCompiler.IExprType,TriadCompiler.IExprType)">
            <summary>
            ��������� ���� � ��������� ������������
            </summary>
            <param name="varType">���������� � ����������</param>
            <param name="exprType">��� ���������</param>
            <returns>True, ���� ��� � �������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Assignement.CheckPolusTypes(TriadCompiler.IPolusType,TriadCompiler.IPolusType)">
            <summary>
            ��������� ������������ �������
            </summary>
            <param name="varType">��� ������-����������</param>
            <param name="exprType">��� ��������� ���������</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Condition">
            <summary>
            ������ ��������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Condition.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            �������� ��������
            </summary>
            <syntax>If Expression Then StatementList [Else StatementList] EndIf</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Condition.CheckConditionType(TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            ��������� ������������� ����� � ������� ��������� if ��� while
            </summary>
            <param name="conditionInfo">���������� �� �������</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.ForCicle">
            <summary>
            ������ ����� �� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.ForCicle.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            ���� �� ���������
            </summary>
            <syntax>For Variable := Expression [ By Expression ] To Expression Do StatementList EndFor</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.StatementContext">
            <summary>
            �������� ������ ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.Initial">
            <summary>
            ������ �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.MessageEvent">
            <summary>
            ������� ��������� ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.Common">
            <summary>
            ������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.Handling">
            <summary>
            ������ ��������� � �������������� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.StatementList">
            <summary>
            ������ ������������������ ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.StatementList.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            ������������������ ����������
            </summary>
            <syntax>Statement {;Statement}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">�������� ���������</param>
            <returns>����� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.WhileCicle">
            <summary>
            ������ ����� while
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.WhileCicle.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            �������� ����
            </summary>
            <syntax>While Expression Do StatementList EndWhile</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Let">
            <summary>
            ������ ��������� �������� ����������� �������� let
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Let.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ����������� ���������� ����
            </summary>
            <syntax>Let Identificator ( expression {, expression} Be Identificator</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Print">
            <summary>
            ������ ��������� ���������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Print.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ���������� ������
            </summary>
            <syntax>WriteLine Expression</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>  
        </member>
        <member name="T:TriadCompiler.Parser.Common.Ev.EventVar">
            <summary>
            ������ ����� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Ev.EventVar.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            ������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="checkRegistration">������������� �������� �����������</param>
            <returns>�������� �������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Ev.EventInfo">
            <summary>
            �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.Type">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.CoreNameCode">
            <summary>
            ������������� ����� � ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.MethodRefCode">
            <summary>
            ������������� ������, ������� ������������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.StrCode">
            <summary>
            ��������� �������������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Function.FunctionInfo">
            <summary>
            ���������� � ����������� ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Function.FunctionInfo.Type">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Function.FunctionInfo.code">
            <summary>
            ��� ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Function.FunctionInfo.strCode">
            <summary>
            ��������� ������������� ����
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Function.FunctionInfo.StrCode">
            <summary>
            ��������� �������������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Function.FunctionInfo.Code">
            <summary>
            ������������� � ���� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Function.FunctionInvoke">
            <summary>
            ������ ������ �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Function.FunctionInvoke.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������ �������
            </summary>
            <syntax>Identificator ParameterList</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Function.FunctionInvoke.ParameterList(TriadCompiler.EndKeyList,TriadCompiler.ParameterList{TriadCompiler.IExprType},TriadCompiler.Key,TriadCompiler.Key)">
            <summary>
            ������ ������ ���������� ������ �������
            </summary>
            <syntax>( {Expression} )</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="type">��� �������</param>
            <param name="openPar">������ ������������� ������</param>
            <param name="closePar">������ ������������� ������</param>
            <returns>������ ���������, �������������� ���������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Function.FunctionInvoke.CheckParameterType(System.Collections.Generic.IEnumerator{TriadCompiler.IExprType},TriadCompiler.IExprType)">
            <summary>
            ��������� ��������
            </summary>
            <param name="paramEnumerator">������� ����� ����������</param>
            <param name="varType">����������� ���</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectReference">
            <summary>
            ������ �� ����� ������ ��� �� �������� ��������
            </summary>
            <remarks>� ���� ������ ������ ��������� static ����������,
            �.�. ������ ������� ������� ����� ���� ����������!!!</remarks>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.AdditionalIndexCheck">
            <summary>
            �������������� �������� �������
            </summary>
            <param name="objectName">��� �������</param>
            <param name="exprInfo">�������� �������</param>
            <param name="indexNumber">����� �������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            ������ ������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="allowRange">��������� �� ���������</param>
            <returns>�������� ������</returns>
            <remarks>� ����� ���������� ������������ ObjectRefInfo ����
            ��������� ������� ��������� ��� ��������� �� ������ �������, ����
            ��� ������� ���������</remarks>
            <syntax>Identificator # [ IndexBounds {,IndexBounds} ] #</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.Parse(TriadCompiler.EndKeyList,System.Boolean,TriadCompiler.Parser.Common.ObjectRef.ObjectReference.AdditionalIndexCheck)">
            <summary>
            ������ ������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="allowRange">��������� �� ���������</param>
            <param name="additionalIndexCheck">�������������� �������� �������</param>
            <returns>�������� ������</returns>
            <remarks>� ����� ���������� ������������ ObjectRefInfo ����
            ��������� ������� ��������� ��� ��������� �� ������ �������, ����
            ��� ������� ���������</remarks>
            <syntax>Ident # [ IndexBounds {,IndexBounds} ] #</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.IndexBounds(TriadCompiler.EndKeyList,System.Boolean,System.Boolean@,TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo,System.Int32,TriadCompiler.Parser.Common.ObjectRef.ObjectReference.AdditionalIndexCheck)">
            <summary>
            ������ ������� ��� ��������� ��������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="allowRange">��������� �� ���������</param>
            <param name="rangeFound">True, ���� ������ ��������</param>
            <param name="refInfo">���������� � ����������� �������</param>
            <param name="currIndexNumber">����� �������� �������</param>
            <param name="additionalIndexCheck">�������������� �������� �������</param>
            <returns>�������� ���������. ���� ��� ��������� ������,
            �� ������� ������� ��������� ��������� � ������</returns>
            <syntax>Expression # : Expression #</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.CheckIndexCount(TriadCompiler.ICommonType,TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo,System.Boolean)">
            <summary>
            ��������� ����� �������� � �������
            </summary>
            <param name="varType">���������� ��� �������</param>
            <param name="objRef">�������� ������������ ������</param>
            <param name="arrayAllowed">��������� �� ������� ��� ��������</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo">
            <summary>
            �������� ������ �� �������� ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds">
            <summary>
            �������� ��������� ��������� ������ �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds.#ctor(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            �����������
            </summary>
            <param name="lowIndexExpr">���������, ����������� ������ ������� ���������</param>
            <param name="topIndexExpr">���������, ����������� ������� ������� ���������</param>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds.lowIndexExpr">
            <summary>
            ���������, ����������� ������ ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds.topIndexExpr">
            <summary>
            ���������, ����������� ������� ������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.Name">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.AddIndexBounds(TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds)">
            <summary>
            �������� �������� ��������� �������
            </summary>
            <param name="indexBounds">��������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.AddIndexBounds(TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds[])">
            <summary>
            �������� �������� ��������� �������
            </summary>
            <param name="indexBoundArray">������ ����������</param>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBoundArray">
            <summary>
            ��������� ��������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.HasIndexes">
            <summary>
            ������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IsRange">
            <summary>
            ������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexCount">
            <summary>
            ����� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.CoreNameCode">
            <summary>
            ���, ��������������� ������ �� �������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.StrCode">
            <summary>
            ��������� ������������� ����������
            ���� ������ ��������, �� � ��������� ������������� ������� ������ ������ �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.AppendStrCode(System.String)">
            <summary>
            �������� ����� ���������� �������������
            </summary>
            <param name="code">����������� �����</param>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.objectName">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.isIndexRange">
            <summary>
            ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.indexBounds">
            <summary>
            ��������� ��������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.coreNameCode">
            <summary>
            ���, ��������������� ������ �� �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.codeStr">
            <summary>
            ��������� ������������� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.Header">
            <summary>
            ������ ��������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.Header.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ��������� �������
            </summary>
            <syntax>{ ParameterList | Interface }</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>������ ����� ����������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.HeaderName">
            <summary>
            ��� ������� � ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.HeaderName.RegisterTypeFunction">
            <summary>
            �������, �������������� ���
            </summary>
            <param name="headerName">��� � ���������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.HeaderName.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Header.HeaderName.RegisterTypeFunction)">
            <summary>
            ��������� ��� ������� � ���������
            </summary>
            <syntax>Identificator</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="registerType">�������, �������������� ���</param>
            <returns>����������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.IncludeSection">
            <summary>
            ������ ������ ����������� ������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.IncludeSection.Parse(TriadCompiler.EndKeyList,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            ������ �����������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="allowedTypeList">��������� �����������, ������� ����� ����������</param>
            <syntax>{ IncludeStatement }</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.IncludeSection.IncludeStatement(TriadCompiler.EndKeyList,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            �������� ����������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="allowedTypeList">��������� �����������, ������� ����� ����������</param>
            <syntax>Structure | Routine | InfProcedure | Model | ModelCondition
            Identificator #ParameterList# from String </syntax>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.Interface">
            <summary>
            ������ ���������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.Interface.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������
            </summary>
            <syntax>SingleInterface {SingleInterface}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.Interface.SingleInterface(TriadCompiler.EndKeyList)">
            <summary>
            ��������� ���������
            </summary>
            <syntax> ( PolusDeclaration {; PolusDeclaration} )</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.ParameterSection">
            <summary>
            ������ ������ ���������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.ParameterSection.Parse(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            ������ ����������
            </summary>
            <syntax> SingleParameterList {SingleParameterList}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">��������</param>
            <returns>��������� ����������� �����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.ParameterSection.SingleParameterList(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            ��������� ������ ����������
            </summary>
            <syntax>[ VariableDeclaration {;VariableDeclaration} ]</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">���������</param>
            <returns>��������� ����������� �����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Polus.PolusVar">
            <summary>
            ������ ������ / ��������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Polus.PolusVar.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ��� ������
            </summary>
            <syntax>Identificator [ Expression : Expression ]</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>���������� � ������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Polus.PolusInfo">
            <summary>
            ���������� � ������-����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Polus.PolusInfo.Type">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Polus.PolusInfo.CoreNameCode">
            <summary>
            ������������� � ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Var.Variable">
            <summary>
            ������ ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Var.Variable.Parse(TriadCompiler.EndKeyList,System.Boolean,System.Boolean)">
            <summary>
            ��������� � ����������
            </summary>
            <syntax>Identificator [ Expression{,Expression}]</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="allowRange">������������ ���������</param>
            <param name="allowNotIndexedArray">������������ ������� ��� ��������</param>
            <returns>���������� � ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Var.Variable.ParseGraphOrNode(TriadCompiler.EndKeyList)">
            <summary>
            ��������� � ����� ��� ������� �����
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>���������� � ����������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Var.VarInfo">
            <summary>
            ���������� � ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Var.VarInfo.Type">
            <summary>
            ��� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Var.VarInfo.HasNoError">
            <summary>
            ������� ����, ��� ���������� ���� ��������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Var.VarInfo.Code">
            <summary>
            ������������� � ���� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Design.Statement.Simulate">
            <summary>
            ������ ��������� simulate
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Design.Statement.Simulate.icCallNumber">
            <summary>
            ���������� ����� ������ ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Design.Statement.Simulate.modelName">
            <summary>
            ��� ������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Design.Statement.Simulate.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Design.Statement.Simulate.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ������ ���������
            </summary>
            <param name="endKeys">��������� �������� ��������</param> 
        </member>
        <member name="M:TriadCompiler.Parser.Design.Statement.Simulate.GenerateSimulateMethod(System.String,System.Int32)">
            <summary>
            ������������� �����, ����������
            </summary>
            <param name="modelName">��� ������</param>
            <param name="icCallNumber">���������� ����� ��</param>
            <returns>���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Design.Statement.Simulate.SingleSpyObject(TriadCompiler.EndKeyList,System.Collections.Generic.IEnumerator{TriadCompiler.ISpyType})">
            <summary>
            ���� spy-������
            </summary>
            <syntax>Variable | PolusVar | EventVar</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <param name="enumerator">��� ����������� ���������</param>
            <returns>��� ������, ������������ ���� spy-������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.Eor">
            <summary>
            ������ ��������� ��������� �������������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.Eor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ��������� �������� ��������� �������������
            </summary>
            <syntax>Eor</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <returns>������������� ��������� � ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo">
            <summary>
            ���������� � ������ ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo.Type">
            <summary>
            ��� ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo.Code">
            <summary>
            ������������ ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo.ipCallNumber">
            <summary>
            ���������� ����� ��
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.IPCall">
            <summary>
            ������ ������ ��
            </summary>
            <summary>
            ������ ������ �� (��������� ����)
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCall.ipCallNumber">
            <summary>
            ���������� ����� ������ ��
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.SimCondition.Statement.IPCall.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ����� ��
            </summary>
            <syntax>Identificator # [ ParameterList ] # SpyParameterList # { ParameterList } # # IPAssignment #</syntax>
            <param name="endKeys">��������� �������� ��������</param> 
            <returns>��� ��</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.SpyParameterList(TriadCompiler.EndKeyList,TriadCompiler.Parser.SimCondition.Statement.IPCallInfo,TriadCompiler.Parser.SimCondition.Statement.IPCall.SingleSpyObjectDelegate)">
            <summary>
            ������ spy-��������
            </summary>
            <syntax>( SingleSpyObject {, SingleSpyObject } )</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <param name="ipCallInfo">���������� � ������ �������������� ���������</param>
            <param name="singeSpyObject">�����, ����������� ��������� spy-������</param>
            <returns>��������������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.IPCall.SingleSpyObjectDelegate">
            <summary>
            �����, ����������� ��������� spy-������ � ������ spy-��������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="enumerator">��� ����������� ���������</param>
            <returns>>��� ������, ������������ ���� spy-������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.SingleSpyObject(TriadCompiler.EndKeyList,System.Collections.Generic.IEnumerator{TriadCompiler.ISpyType})">
            <summary>
            ���� spy-������
            </summary>
            <syntax>Variable | PolusVar | EventVar</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <param name="enumerator">��� ����������� ���������</param>
            <returns>��� ������, ������������ ���� spy-������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.OutVarList(TriadCompiler.EndKeyList,TriadCompiler.Parser.SimCondition.Statement.IPCallInfo)">
            <summary>
            ������ out-����������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="ipCallInfo">���������� � ��</param>
            <returns>��� ������, ������������ �������� out-����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.IPAssignment(TriadCompiler.EndKeyList,System.String)">
            <summary>
            ������ ��������������� ������������
            </summary>
            <param name="endKeys">���������� �������� �������</param>
            <param name="ipName">��� ��</param>
            <returns>��� ������, ������������ ������������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.GenerateIProcedureCreation(System.String,System.Int32,System.Collections.Generic.List{TriadCompiler.Parser.Common.Expr.ExprInfo})">
            <summary>
            ������������� ���, ��������� ��������� ��
            </summary>
            <param name="ipName">��� ��</param>
            <param name="ipNumber">���������� ����� ��</param>
            <param name="paramExprInfoList">������ ����������</param>
            <returns>���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.GenerateIProcedureInitialization(System.Int32)">
            <summary>
            ������������� ���, ���������������� ��
            </summary>
            <param name="ipNumber">���������� ����� ��</param>
            <returns>���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.GetIProcedureCode(System.String,System.Int32)">
            <summary>
            �������� ���, ������������ ����������� ��
            </summary>
            <param name="ipName">��� ��</param>
            <param name="ipCallNumber">���������� ����� ��</param>
            <returns>���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.InfProcedure.Header.InfHeader">
            <summary>
            ������ ��������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.InfProcedure.Header.InfHeader.startKeys">
            <summary>
            ��������� ������� ��������� ��
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Header.InfHeader.StartKeys">
            <summary>
            ��������� ������� ��������� ��
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfHeader.Parse(TriadCompiler.EndKeyList,TriadCompiler.IProcedureType)">
            <summary>
            ��������� �������
            </summary>
            <syntax>{ ParameterList | Interface | OutList }</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="ipType">��� ��</param>
        </member>
        <member name="T:TriadCompiler.Parser.InfProcedure.Header.InfInterface">
            <summary>
            ������ ���������� ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.InfProcedure.Header.InfInterface.spyDeclarationStartKeys">
            <summary>
            ��������� ������� ���������� ������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Header.InfInterface.SpyDeclarationStartKeys">
            <summary>
            ��������� ������� ���������� ������� ��������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfInterface.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������
            </summary>
            <syntax>SingleInterface {SingleInterface}</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>������ ����� �������� ��������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfInterface.SingleInterface(TriadCompiler.EndKeyList)">
            <summary>
            ��������� ���������
            </summary>
            <syntax> ( NextDeclaration {; NextDeclaration} )</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>������ ����� �������� ��������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfInterface.SingleDeclaration(TriadCompiler.EndKeyList)">
            <summary>
            ������ ��������� � ���������� 
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
            <returns>������ ����� spy-��������</returns>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Header.InfInterface.codeBuilder">
            <summary>
            ��������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.InfProcedure.Header.InfOutSection">
            <summary>
            ������ ������ out-����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfOutSection.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������ out-����������
            </summary>
            <syntax> SingleOutSection # SingleOutSection #</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <returns>������ ����� ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfOutSection.SingleOutSection(TriadCompiler.EndKeyList)">
            <summary>
            ������ ����� ������
            </summary>
            <syntax>{ VarDeclaration #,VarDeclaration# }</syntax>
            <param name="endKeys">���������� �������� �������</param>
            <returns>������ ����� ����������</returns>
        </member>
        <member name="F:TriadCompiler.Parser.InfProcedure.Statement.InfCase.caseConditionStartKeys">
            <summary>
            ��������� �������  ������� � ��������� case
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Statement.InfCase.CaseConditionStartKeys">
            <summary>
            ��������� �������  ������� � ��������� case
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Statement.InfCase.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� �������������� ������ 
            </summary>        
            <param name="endKeys">��������� �������� ��������</param> 
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Statement.InfCase.CaseConditionList(TriadCompiler.EndKeyList)">
            <summary>
            ����� � ��������� case
            </summary>
            <syntax>caseCondition{,caseCondition}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Statement.InfCase.CaseCondition(TriadCompiler.EndKeyList)">
            <summary>
            ��� ������� �������� � ��������� case
            </summary>
            <syntax># polus PolusVar | event EventVar | in Variable # </syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Add.Addend">
            <summary>
            ������ ���������� � ����������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Add.Addend.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ����������� ���������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <syntax>StructFactor { structMultOP StructFactor }</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Add.Addend.AddendCode(TriadCompiler.Key)">
            <summary>
            ������������� ��� ��� ������������ ����������
            </summary>
            <param name="operation">��� ��������</param>
            <returns>��������������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Conn.Connection">
            <summary>
            ������ ���������� � ����������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Conn.Connection.Parse(TriadCompiler.EndKeyList,System.String)">
            <summary>
            ���� ��� �����, ����������� ������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="createConnectionMethodName">��� ������, ���������� ����������</param>
            <syntax>Arc | Edge ConnectionTerminalNode -- ConnectionTerminalNode</syntax>
            <returns>��������������� ���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Conn.Connection.ConnectionEndPoint(TriadCompiler.EndKeyList,System.CodeDom.CodeMethodInvokeExpression)">
            <summary>
            ���� �� ������ ���� ��� �����
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="addConnectionStat">������ �� �����, ����������� ����������</param>
            <returns>��������������� ���</returns>
            <synatx>ObjectReference . ObjectReference</synatx>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Const.Constant">
            <summary>
            ������ �������� ��������� � ����������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Const.Constant.Parse(TriadCompiler.EndKeyList,System.String)">
            <summary>
            ����������� ���������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="createConstGraphMethosName">�������� ������, ���������� ����������� ���������</param>
            <syntax>DirectCycle | UndirectCycle | DirectPath | UndirectPath |
            DirectStar | UndirectStar ( NodeDeclarationInExpr , { NodeDeclarationInExpr } ) </syntax>
            <returns>��������������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor">
            <summary>
            ������ ��������� � ����������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ����������� ���������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <syntax>NodeDeclaration | DesignVariable | ( StructExpression )
            | Connection | StructConstant </syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor.GraphVarCode(System.String)">
            <summary>
            ������������� ��� ��� ��������� � �������� ���������� � ����������� ���������
            </summary>
            <param name="graphVarStringCode">��������� ��� �������� ����������</param>
            <returns>��������������� ���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor.NodeAddVarCode(System.String)">
            <summary>
            ������������� ��� ��� ���������� ������� � �������� ���������� � ����������� ���������
            </summary>
            <param name="nodeVarStrinCode">��������� ��� ���������� ������������ �������</param>
            <returns>��������������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet">
            <summary>
            ��������� ��������, ��������� �� ����������� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet.Start">
            <summary>
            ��������� ��������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet.Start.structFactorSet">
            <summary>
            ��������� ��������� �������� ������������ ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet.Start.Factor">
            <summary>
            ��������� ������� ������������ ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Node.NodeDeclaration">
            <summary>
            ������ ���������� ������� � ����������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Node.NodeDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������� ������� � ����������� ���������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <syntax>ObjectReference # ObjectReference  {,ObjectReference } #</syntax>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.StructExpression">
            <summary>
            ������ ���������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.StructExpression.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ����������� ���������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <syntax>StructAddend {StructAdd StructAddend }</syntax>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.StructExpression.ExpressionCode(TriadCompiler.Key)">
            <summary>
            ������������� ��� ��� ������������ ���������
            </summary>
            <param name="operation">����������� ��������</param>
            <returns>��������������� ���</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet">
            <summary>
            ��������� ��������, ��������� �� ������������ �����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation">
            <summary>
            ��������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.allSet">
            <summary>
            ��������� ���� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.structAddSet">
            <summary>
            ��������� �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.structMultSet">
            <summary>
            ��������� �������� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.All">
            <summary>
            ��� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.Add">
            <summary>
            ��������� �������� ������������ ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.Mult">
            <summary>
            ��������� �������� ������������ ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.Statement.StructAssignement">
            <summary>
            ������ ��������� ������������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.Statement.StructAssignement.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ���������� �������� ������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <syntax>DesignVariable := StructExpression</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.Statement.StructAssignement.CheckDesignTypes(TriadCompiler.IExprType,TriadCompiler.IExprType)">
            <summary>
            ��������� ������������� design ����� � ��������� ������������
            </summary>
            <param name="varType">��� ����������</param>
            <param name="exprType">��� �������������� ���������</param>
            <returns></returns>
        </member>
        <member name="T:TriadCompiler.Parser.Model.Declaration.DesignVariable.DesignVarDeclaration">
            <summary>
            ������ ���������� ������-����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Declaration.DesignVariable.DesignVarDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            ������ ���������� design ����������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <sysntax>Structure | Routine | Model | InfProcedure | ModelCondition
            DesignVarDeclaration {,DesignVarDeclaration}</sysntax>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Declaration.DesignVariable.DesignVarDeclaration.DesignDeclaration(TriadCompiler.EndKeyList,TriadCompiler.DesignTypeCode)">
            <summary>
            ���������� design ����������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="designTypeCode">��� design ����������</param>
            <syntax>Identificator # RangeDeclaration #</syntax>
        </member>
        <member name="T:TriadCompiler.Parser.Model.DesignVar.DesignVariable">
            <summary>
            ������ ������-����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Model.DesignVar.DesignVariable.Parse(TriadCompiler.EndKeyList,TriadCompiler.DesignTypeCode)">
            <summary>
            ��������� � design ����������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="expectedTypeCode">��������� ��� design ����������</param>
            <syntax>Identificator #[ Expression {, Expression } ]#</syntax>
            <returns>�������� ����������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Model.Statement.PutRoutine">
            <summary>
            ������ ��������� ��������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Statement.PutRoutine.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ��������� �����
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <syntax>Put DesignVariable On DesignVariable.ObjectReference #PolusPairList#</syntax>
            <returns>��������������� ���</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Statement.PutRoutine.PolusPairList(TriadCompiler.EndKeyList,System.String)">
            <summary>
            ������ ������ ������������ ������� ������ � �������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="routineVarName">��� ������-����������</param>
            <synatx> {SinglePolusPair} </synatx>
            <returns>������ ����������</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Statement.PutRoutine.SinglePolusPair(TriadCompiler.EndKeyList,System.String)">
            <summary>
            ������ ������ ������������ ����� ������� ������ � �������
            </summary>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="routineVarName">��� ������-����������</param>
            <syntax>PolusVar = PolusVar</syntax>
            <returns>��������</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Available">
            <summary>
            ������ ��������� ��������������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Available.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ��������������� ������ 
            </summary>
            <syntax>Available PolusVariable {,PolusVariable}</syntax>
            <param name="endKeys">��������� �������� ��������</param> 
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Cancel">
            <summary>
            ������ ��������� ������ �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Cancel.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ������ ������� 
            </summary>
            <syntax>Cancel Identificator {,Identificator}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Case">
            <summary>
            ������ ��������� case � ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Case.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            �������� �������������� ������
            </summary>
            <syntax>Case caseConditionList Colon StatementList 
            {Break caseConditionList Colon StatementList} EndCase</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Case.CaseConditionList(TriadCompiler.EndKeyList)">
            <summary>
            ����� � ��������� case
            </summary>
            <syntax>caseCondition{,caseCondition}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Case.CaseCondition(TriadCompiler.EndKeyList)">
            <summary>
            ��� ������ � ��������� case
            </summary>
            <syntax>PolusVariable</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Interlock">
            <summary>
            ������ ��������� ������������ ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Interlock.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ������������ ������
            </summary>
            <syntax>Iterlock PolusVariable {,PolusVariable}</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.OutStatement">
            <summary>
            ������ ��������� ������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.OutStatement.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ������� ���������
            </summary>
            <syntax>Out Expression #Through PolusVariable {,PolusVariable}#</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Schedule">
            <summary>
            ������ ��������� ������������ �������
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Schedule.Parse(TriadCompiler.EndKeyList)">
            <summary>
            �������� ������������
            </summary>
            <syntax>SCHEDULE Identificator{,Identificator} At Expression</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>  
        </member>
        <member name="T:TriadCompiler.VarDeclarationContext">
            <summary>
            �������� ������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.VarDeclarationContext.Common">
            <summary>
            �����
            </summary>
        </member>
        <member name="F:TriadCompiler.VarDeclarationContext.SpyObjectList">
            <summary>
            ������ spy-��������
            </summary>
        </member>
        <member name="F:TriadCompiler.VarDeclarationContext.IncludeSection">
            <summary>
            ������ �����������
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignParser.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.DesignParser.Design(TriadCompiler.EndKeyList)">
            <summary>
            �������� design
            </summary>
            <syntax>Design { Model.Parse | SimCondition.Parse } Def StatementList EndDesign</syntax>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="F:TriadCompiler.DesignParser.startKeys">
            <summary>
            ��������� ��������� �������� ��������� � Design
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignParser.StartKeys">
            <summary>
            ��������� ������� ��������� � Design
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            �������� � Design
            </summary>
            <param name="endKeys"> ��������� �������� �������� </param>
            <param name="context"> ������� �������� </param>
            <returns> ������������� ��� ��������� ���� </returns>
        </member>
        <member name="P:TriadCompiler.InfProcedureParser.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������ � ��������� ����
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.IProcedure(TriadCompiler.EndKeyList)">
            <summary>
            �������������� ���������
            </summary>
            <syntax>InfProcedure HeaderName # IPHeader # # InitialPart # 
            # ProcessingPart # # EventPart # EndInf</syntax>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.IPHeaderName(TriadCompiler.EndKeyList)">
            <summary>
            ��������� ��� �� � ���������
            </summary>
            <syntax>Identificator</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <returns>��� ��</returns>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.InitialPart(TriadCompiler.EndKeyList)">
            <summary>
            ��������� �������
            </summary>
            <syntax>Initial StatementList EndInitial</syntax>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Processing(TriadCompiler.EndKeyList,TriadCompiler.IProcedureType)">
            <summary>
            ������ �������������� ���������
            </summary>
            <syntax>Processing StatementList EndP</syntax>
            <param name="endKey">��������� ���������� �������� ��������</param>
            <param name="ipType">��� ��</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Handling(TriadCompiler.EndKeyList)">
            <summary>
            ������ ���������
            </summary>
            <syntax>Handling StatementList EndH</syntax>
            <param name="endKey"></param>
        </member>
        <member name="F:TriadCompiler.InfProcedureParser.startKeys">
            <summary>
            ��������� ��������� �������� ��������� � ��
            </summary>
        </member>
        <member name="P:TriadCompiler.InfProcedureParser.StartKeys">
            <summary>
            ��������� ������� ��������� � ��
            </summary>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            �������� � �������������� ���������
            </summary>
            <param name="endKeys"> ��������� �������� �������� </param>
            <param name="context"> ������� �������� </param>
            <returns> ������������� ��� ��������� ���� </returns>
        </member>
        <member name="T:TriadCompiler.SimConditionParser">
            <summary>
            ����� ��� ������� ��
            </summary>
        </member>
        <member name="P:TriadCompiler.SimConditionParser.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.ModelCondition(TriadCompiler.EndKeyList)">
            <summary>
            �������� ������� �������������
            </summary>
            <syntax>SimCondition HeaderName # IPHeader # { InfProcedure.Parse } Def StatementList EndIC</syntax>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="F:TriadCompiler.SimConditionParser.startKeys">
            <summary>
            ��������� ��������� �������� ��������� � ��
            </summary>
        </member>
        <member name="F:TriadCompiler.SimConditionParser.standartIP">
            <summary>
            ����������� ��
            </summary>
        </member>
        <member name="P:TriadCompiler.SimConditionParser.StartKeys">
            <summary>
            ��������� ������� ��������� � ��
            </summary>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            �������� � �������� �������������
            </summary>
            <param name="endKeys"> ��������� �������� �������� </param>
            <param name="context"> ������� �������� </param>
            <returns> ������������� ��� ��������� ���� </returns>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.CreateStandartIP">
             <summary>
            
             </summary>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.RegisterIProcedures">
            <summary>
            ���������������� ����������� �������������� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignTypeCode">
            <summary>
            ���� ��������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Structure">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Routine">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Model">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Design">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.NoType">
            <summary>
            ������ ���
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignVarArrayType">
            <summary>
            ��� �������������� design ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignVarArrayType.#ctor(System.String,TriadCompiler.DesignTypeCode)">
            <summary>
            �����������
            </summary>
            <param name="varName">��� ����������</param>
            <param name="typeCode">��� design ����������</param>
        </member>
        <member name="P:TriadCompiler.DesignVarArrayType.Name">
            <summary>
            ��� �����
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarArrayType.TypeCode">
            <summary>
            ��� design ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarArrayType.varName">
            <summary>
            ��� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarArrayType.typeCode">
            <summary>
            ��� ������-����������
            </summary>
        </member>
        <member name="T:TriadCompiler.IDesignVarType">
            <summary>
            ��������� design ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.IDesignVarType.TypeCode">
            <summary>
            ��� design ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.EventType">
            <summary>
            ���, ����������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.EventType.#ctor(System.String)">
            <summary>
            �����������
            </summary>
            <param name="eventName">��� �������</param>
        </member>
        <member name="P:TriadCompiler.EventType.Name">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.EventType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.EventType.eventName">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.EventType.isSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="T:TriadCompiler.FunctionType">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.FunctionType.Name">
            <summary>
            ���
            </summary>
        </member>
        <member name="P:TriadCompiler.FunctionType.MethodCodeName">
            <summary>
            ��� ������� � ��������������� ����
            </summary>
        </member>
        <member name="P:TriadCompiler.FunctionType.ReturnedType">
            <summary>
            ���, ����������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.FunctionType.typeName">
            <summary>
            ��� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.FunctionType.strCode">
            <summary>
            ��� ������� � ��������������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.FunctionType.returnedType">
            <summary>
            ���, ����������� ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.CommonGenerator">
            <summary>
            ��������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CommonGenerator.CoreFilePath">
            <summary>
            ���� � ����� � ����� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.AddTypeInUnit(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            ���������� ���� ������ � ������
            </summary>
            <param name="typeCode"></param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.AddReference(System.String)">
            <summary>
            �������� ������ �� ������ ������
            </summary>
            <param name="fileName">��� ������</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.GenerateCode(System.String)">
            <summary>
            ������� ���
            </summary>
            <param name="fileName">��� ������</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.Reload">
            <summary>
            ����������� ��������� ���� � ����� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CommonGenerator.unitCode">
            <summary>
            ����������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CommonGenerator.namespaceCode">
            <summary>
            ������������ ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.DllGenerator">
            <summary>
            ��������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.AddReference(System.String)">
            <summary>
            �������� ������ �� ������ ������
            </summary>
            <param name="fileName">��� ������</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.Reload">
            <summary>
            ����������� ��������� ���� � ����� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.GenerateCode(System.String)">
            <summary>
            ������� ������ (dll)
            </summary>
            <param name="fileName">��� ������</param>
        </member>
        <member name="F:TriadCompiler.Code.Generator.DllGenerator.csCodeProvider">
            <summary>
            ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.DllGenerator.referenceAssembliesList">
            <summary>
            ������, �� ������� ����� ���������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.MemoryGenerator">
            <summary>
            ��������� ������ � ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.AddReference(System.String)">
            <summary>
            �������� ������ �� ������ ������
            </summary>
            <param name="fileName">��� ������</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.Reload">
            <summary>
            ����������� ��������� ���� � ����� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.GenerateCode(System.String)">
            <summary>
            ������� ������ � ������
            </summary>
            <param name="fileName">��� �����</param>
        </member>
        <member name="F:TriadCompiler.Code.Generator.MemoryGenerator.csCodeProvider">
            <summary>
            ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.MemoryGenerator.referenceAssembliesList">
            <summary>
            ������, �� ������� ����� ���������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.TxtGenerator">
            <summary>
            ��������� ������ �� C#
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.TxtGenerator.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.TxtGenerator.GenerateCode(System.String)">
            <summary>
            ������� ����� �� C#
            </summary>
            <param name="fileName">��� �����</param>
        </member>
        <member name="T:TriadCompiler.Code.Generator.CodeFormat">
            <summary>
            ������ ��������������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.None">
            <summary>
            ��� ��������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.Dll">
            <summary>
            ��������� Dll
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.Txt">
            <summary>
            ��������� Txt
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.Memory">
            <summary>
            ��������� � ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.CodeFabric">
            <summary>
            ������� ��������� ���� (��������)
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CodeFabric.#ctor">
            <summary>
            ���������� �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CodeFabric.ReloadFabric(TriadCompiler.Code.Generator.CodeFormat)">
            <summary>
            �������� ����� ������ ���������� ����
            </summary>
            <param name="codeFormat"></param>
        </member>
        <member name="P:TriadCompiler.Code.Generator.CodeFabric.Instance">
            <summary>
            ��������� ���� (��������)
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CodeFabric.CreateNewInstance(TriadCompiler.Code.Generator.CodeFormat)">
            <summary>
            ������� ����� ��������� ����� ������
            </summary>
            <param name="codeFormat">������ ��������������� ����</param>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFabric.instance">
            <summary>
            ��������� ����� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFabric.generatingMode">
            <summary>
            ������� �����
            </summary>
        </member>
        <member name="T:TriadCompiler.EndKeyList">
            <summary>
            ��������� ���������� �������� ��������
            </summary>
        </member>
        <member name="M:TriadCompiler.EndKeyList.Contains(TriadCompiler.Key)">
            <summary>
            ��������, ���������� �� ��������� ������ � ���������
            </summary>
            <param name="key">��������� ������</param>
            <returns>True, ���� ����������</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.UniteWith(System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            ����������� �������� � ���������� �������� ��������
            </summary>
            <param name="keyList">��������� ��������</param>
            <returns>�������� ���������</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.UniteWith(TriadCompiler.Key[])">
            <summary>
            ����������� ��������� �������� � ���������� ���������
            </summary>
            <param name="keys">��������� �������</param>
            <returns>�������� ���������</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.GetLastKeys">
            <summary>
            �������� ������ ��������� ��� ����������� ��������
            </summary>
            <returns>������ ��������</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.Clone">
            <summary>
            ���������� ��������� ��������
            </summary>
            <returns>����� ���������</returns>
        </member>
        <member name="F:TriadCompiler.EndKeyList.allowedKeys">
            <summary>
            ������ ���������� ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.StructureParser">
            <summary>
            ������ ���������� � ���������
            </summary>
            <summary>
            ����� ��� ������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.StructureParser.structureStatementSet">
            <summary>
            ��������� ��������� �������� ��������� � ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureParser.StartKeys">
            <summary>
            ��������� ������� ��������� � ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.StructureParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            �������� � ���������
            </summary>
            <param name="endKeys"> ��������� �������� �������� </param>
            <param name="context"> ������� �������� </param>
            <returns> ������������� ��� ��������� ���� </returns>
            <syntax> StructVarDeclaration | StructAssignement | Assignement | IfStatement | WhileStatement |
            ForStatement | DesignTypeConstructor | Print </syntax>
        </member>
        <member name="P:TriadCompiler.StructureParser.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.StructureParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.StructureParser.Structure(TriadCompiler.EndKeyList)">
            <summary>
            ���������� ���������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <syntax>Structure Identificator Define StatementList EndStructure</syntax>
        </member>
        <member name="T:TriadCompiler.GraphCodeBuilder">
            <summary>
            ���������� ����������� ����, ���������� �� ������ Build()
            !!! ��� ����������-����� ����� ������ ������ ��������������� � ������ Reload
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.CreateBuildMethod">
            <summary>
            ������� �����, �������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.AddVarDefinition(TriadCompiler.IExprType)">
            <summary>
            �������� ���������� ����������
            </summary>
            <param name="varType">��� ����������</param>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.AddBuildStatementList(System.CodeDom.CodeStatementCollection)">
            <summary>
            �������� ���, �������� ���������
            </summary>
            <param name="statementList">������������������ ����������</param>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.Reload">
            <summary>
            ����������� ����������� ���� ��� ����� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.Build">
            <summary>
            ������������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.GraphCodeBuilder.buildGraphMethod">
            <summary>
            �����, � ������� ��������� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.CodeBuilder">
            <summary>
            ���������� ����������� ����
            !!! ��� ����������-����� ����� ������ ������ ��������������� � ������ Reload
            </summary>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.SetClassName(System.String)">
            <summary>
            ������ ��� ������
            </summary>
            <param name="className">��� ������������� ������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddParameterInConstructor(TriadCompiler.IExprType,System.String)">
            <summary>
            �������� �������� � ����������� ������
            </summary>
            <param name="varType">��� ���������</param>
            <param name="varName">��� ���������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddVarDefinition(TriadCompiler.IExprType)">
            <summary>
            �������� ���������� ����������
            </summary>
            <param name="varType">��� ����������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddVarDefinition(TriadCompiler.IExprType,System.CodeDom.CodeExpression)">
            <summary>
            �������� ���������� ���������� c ��������������
            </summary>
            <param name="varType">��� ����������</param>
            /// <param name="initExpression">��� �������������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetDesignVarDefinitionStatements(TriadCompiler.IDesignVarType)">
            <summary>
            �������� design ����������
            </summary>
            <param name="designVarType">��� design ����������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddVarDefinition(System.Collections.Generic.List{TriadCompiler.IExprType})">
            <summary>
            �������� ���������� ����������
            </summary>
            <param name="varTypeList">������ ����� ����������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddVarDefinition(System.Collections.Generic.Dictionary{TriadCompiler.IExprType,System.CodeDom.CodeExpression})">
            <summary>
            �������� ���������� ���������� c ��������������
            </summary>
            <param name="dict">������� ���->��� �������������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetIndexFieldInitialization(System.String,TriadCompiler.IndexedType)">
            <summary>
            ������������� ������������� ��� �������
            </summary>
            <param name="baseTypeString">������� ��� �������</param>
            <param name="indexType">���������� � �������</param>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetSetFieldInitialization">
            <summary>
            ������������� ������������� ����������-���������
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetBaseTypeString(TriadCompiler.IExprType)">
            <summary>
            �������� ��������� ������ �������� ���� ���������� (��� �������� � ��������)
            </summary>
            <param name="varType">��� ����������</param>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetTypeString(System.String,TriadCompiler.ICommonType)">
            <summary>
            �������� ��������� ������������� ���� ���������� (�������� � ���������)
            </summary>
            <param name="baseTypeString">������� ��� ���������� (��� ��������)</param>
            <param name="varType">��� ����������</param>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddPrivateMethod(System.String,System.CodeDom.CodeStatementCollection)">
            <summary>
            �������� ������� �������
            </summary>
            <param name="methodName">��� ��� ������</param>
            <param name="statementList">������ ����������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.SetBaseClass(System.String)">
            <summary>
            ������ ������������ �����
            </summary>
            <param name="baseClassName">��� ������������� ������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddMethod(System.CodeDom.CodeMemberMethod)">
            <summary>
            �������� �����
            </summary>
            <param name="method">�������� ������</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.Build">
            <summary>
            ������������� ���
            </summary>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.Reload">
            <summary>
            ����������� ����������� ���� ��� ����� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilder.resultClass">
            <summary>
            �������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilder.codeConstructor">
            <summary>
            ����������� ��������� ������ (=null, ���� �� �� �����)
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder">
            <summary>
            ��������� ��� �������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Common">
            <summary>
            ����� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.Namespace">
            <summary>
            �������� �������� ������������ ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.BuildMethod">
            <summary>
            �������� ������, ��������� ��������� design ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.SetClassName">
            <summary>
            �������� ������ ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.NodeClassName">
            <summary>
            �������� ������ ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Common.ArrayInitializing">
            <summary>
            ������������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.ArrayInitializing.InitializingClass">
            <summary>
            ��� ������-��������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.ArrayInitializing.InitializingMethod">
            <summary>
            ��� ������ �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.ArrayInitializing.MaxIndexCount">
            <summary>
            ������������ ����������� ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Model">
            <summary>
            ��������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.BaseClass">
            <summary>
            ��� �������� ��� ������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.ModelClass">
            <summary>
            ��� ������ ��� ������������� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Model.PutRoutine">
            <summary>
            ��������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.PutOnAllNodesMethod">
            <summary>
            ��� ������ ��������� ������ �� ��� ������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.PutOnOneNodeMethod">
            <summary>
            ��� ������ ��������� ������ �� ���� ������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.AddPolusPairMethod">
            <summary>
            ��� ������, ���������������� ������������ ����� �������� ������ � �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.ClearPolusPairList">
            <summary>
            ��� ������, ���������� ������ ������������ ������� ������ � �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.CoreName">
            <summary>
            ��������� ��� ���� �������� � ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.CoreName.Name">
            <summary>
            ��� ������ ��� ������������� ���� �������� � ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.CoreName.Range">
            <summary>
            ��� ������ ��� ������������� ��������� ���� �������� � ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.CoreName.Compare">
            <summary>
            ��� ������� ��� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine">
            <summary>
            ��������� ��� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.BaseClass">
            <summary>
            �������� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.SystemTime">
            <summary>
            ��� ����������, �������� ������� ��������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Initial">
            <summary>
            �������� ������� ��������� ������ initialSet
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Block">
            <summary>
            ������� �� ������ � ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Block.Available">
            <summary>
            ��� ������� ��� ������������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Block.Interlock">
            <summary>
            ��� ������� ��� ���������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Send">
            <summary>
            ������� ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Send.SendMessage">
            <summary>
            ��� ������� ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Send.SendMessageToAll">
            <summary>
            ��� ������� ������� ��������� ����� ��� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Print">
            <summary>
            ��� ������� ���������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Receive">
            <summary>
            ��������� ��� ��������� �������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.ReceiveMessage">
            <summary>
            �������� ������� ��������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.ReceivedPolus">
            <summary>
            ��� ������, �� ������� ������ ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.ReceivedMessage">
            <summary>
            ��� ���������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.PolusIndex">
            <summary>
            ��� ����������, �������� ������ ������, ���������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.GetPolusIndexMethod">
            <summary>
            ��� ������, ������������ ������ ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Shedule">
            <summary>
            ������������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Shedule.EventShedule">
            <summary>
            ��� �������, ����������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Shedule.CancelEvent">
            <summary>
            ��� �������, ���������� ��������������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.DoVarChanging">
            <summary>
            ��� �������, �������������� ��������� �������� ���������� � ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure">
            <summary>
            ��������� ��� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BaseClass">
            <summary>
            ��� �������� ��� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.GraphClass">
            <summary>
            ��� ������ ��� ������������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr">
            <summary>
            ���������, ����������� � ���������� ����������� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation">
            <summary>
            �������� ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.Unite">
            <summary>
            �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.Substract">
            <summary>
            �������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.Intersect">
            <summary>
            �������� �����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.AddArcInGraph">
            <summary>
            ��� ������ ���������� ���� � �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.AddEdgeInGraph">
            <summary>
            ��� ������ ���������� ����� � �����
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation">
            <summary>
            ������������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.DeclareNodeInGraph">
            <summary>
            �������� ������ ���������� ��������� ������� � �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.DecalarePolusInNode">
            <summary>
            �������� ������ ���������� ������ � �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.DeclarePolusInAllNodesInGraph">
            <summary>
            �������� ������ ���������� ������ �� ���� �������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.Complete">
            <summary>
            �������� ������ ��������������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr.Stack">
            <summary>
            ���������, ����������� � ����� ��������� ������������ ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.Push">
            <summary>
            ��� push ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNew">
            <summary>
            ��� pushNew ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewUndirectPath">
            <summary>
            ��� pushPath ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewDirectPath">
            <summary>
            ��� pushDPath ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewUndirectCicle">
            <summary>
            ��� pushCicle ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewDirectCicle">
            <summary>
            ��� pushDCicle ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewUndirectStar">
            <summary>
            ��� pushStar ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewDirectStar">
            <summary>
            ��� pushDStar ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.Pop">
            <summary>
            ��� pop ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.First">
            <summary>
            ���, �� �������� ����� ���������� � ������ �������� �������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.Second">
            <summary>
            ���, �� �������� ����� ���������� �� ������� �������� �����
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.IProcedure">
            <summary>
            ��������� ��� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.BaseClass">
            <summary>
            �������� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.GetValueForVar">
            <summary>
            �������� ������� ��������� �������� ��� ���������� � �������������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.SetValueForVar">
            <summary>
            �������� ������� ������������ �������� ��� ���������� � �������������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.RegisterSpyHandler">
            <summary>
            �������� �������, �������������� ���������� �� ��������� �������, �� ������� ������ �������������� ��������� 
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.RegisterSpyObject">
            <summary>
            �������� �������, �������������� � �������������� ��������� spy-������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.IProcedure.Handling">
            <summary>
            ������ handling
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.Handling.DoHandling">
            <summary>
            ������ ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.Handling.SpyObjectNameInDoHandling">
            <summary>
            ��� ������������� ������� � ������ handling
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.Handling.MessageField">
            <summary>
            ��� ���� � spy-�������, ���������� ��������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.DoProcessing">
            <summary>
            ������ �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.RegisterAllSpyObjects">
            <summary>
            �������� �������, �������������� ��� spy-������� � ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.GetOutVariables">
            <summary>
            �������� �������, ����������� ��� out-���������� � ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.GetSpyObject">
            <summary>
            ������� ��������� ������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.SpyObject">
            <summary>
            ��� ������� ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.ICondition">
            <summary>
            ��������� ��� ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.BaseClass">
            <summary>
            �������� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.DoCheck">
            <summary>
            �����, ����������� ������� ��������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.AddIProcedure">
            <summary>
            �����, ��������� ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.GetIProcedure">
            <summary>
            �����, ������������ ����������� ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.InitializeIProcedure">
            <summary>
            �����, ���������������� ������������������ ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.CurrentModel">
            <summary>//by jum
            ���� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Design">
            <summary>
            ��������� ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.BaseClass">
            <summary>
            ����� ������ ������������� 
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.DoSimulate">
            <summary>
            ����� ������ ������������� 
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.GetICondition">
            <summary>
            �����, ������������ ����������� ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.CreateSpyObject">
            <summary>
            ������� �������� ������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.SpyObjectType">
            <summary>
            ��� ������ ���� spy-��������
            </summary>
        </member>
        <member name="T:TriadCompiler.CommonArea">
            <summary>
            ���������� ��������� �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonArea.Instance">
            <summary>
            �������� ��������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.CreateNewArea">
            <summary>
            ������� ����� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.Register(TriadCompiler.ICommonType)">
            <summary>
            �������� ���������� ���������� ���� � ������� ������� ���������
            </summary>
            <param name="varType">��� ����������</param>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsSomeTypeRegistered(System.String,TriadCompiler.CommonArea.IsRequiredType)">
            <summary>
            ���������, ��������������� �� ��������� ��� � ��������� ������
            </summary>
            <param name="name">���</param>
            <param name="isRequiredType">���</param>
            <returns>True, ���� ���������������</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsGraphRegistered(System.String)">
            <summary>
            ���������, ��������������� �� ���� � ����� ������
            </summary>
            <param name="varName">��� ����������</param>
            <returns>True, ���� ���������������</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsNodeRegistered(System.String)">
            <summary>
            ���������, ���������������� �� ������� � ����� ������
            </summary>
            <param name="varName">��� ����������</param>
            <returns>True, ���� ���������������</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsFunctionRegistered(System.String)">
            <summary>
            ���������, ���������������� �� ������� � ����� ������
            </summary>
            <param name="functionName">��� �������</param>
            <returns>True, ���� ����������������</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsIProcedureRegistered(System.String)">
            <summary>
            ���������, ���������������� �� �� � ����� ������
            </summary>
            <param name="functionName">��� ��</param>
            <returns>True, ���� ����������������</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsEventRegistered(System.String)">
            <summary>
            ���������, ���������������� �� ������� � ����� ������
            </summary>
            <param name="eventName">��� �������</param>
            <returns>True, ���� ����������������</returns>
        </member>
        <member name="T:TriadCompiler.CommonArea.IsRequiredType">
            <summary>
            ������� �������� ������������ ����
            </summary>
            <param name="type">����������� ���</param>
            <returns>True, ���� ��� ��������</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.GetType``1(System.String)">
            <summary>
            �������� ��������� ���
            </summary>
            <param name="usedName">�������������� ���</param>
            <returns>��������� ���</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.AddArea">
            <summary>
            �������� ����� ������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.RemoveArea">
            <summary>
            ������� ������� ������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.RemoveAllAreas">
            <summary>
            �������� ��� ������� ��������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonArea.instance">
            <summary>
            ��������� ����� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.CommonArea.Area">
            <summary>
            ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonArea.Area.typeList">
            <summary>
            ������ ������������������ �����
            ������� ����� �������������� ������ �����, ������� ��� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonArea.areaList">
            <summary>
            ������ �������� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.ICommonType">
            <summary>
            ����� ���
            </summary>
        </member>
        <member name="P:TriadCompiler.ICommonType.Name">
            <summary>
            ��� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.IIndexedType">
            <summary>
            ��������� ���������������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.IndexedType">
            <summary>
            ���������� ��������������� ���
            </summary>
        </member>
        <member name="M:TriadCompiler.IndexedType.SetNewIndex(System.Int32)">
            <summary>
            ������ ����� ������
            </summary>
            <param name="indexMaxValue">������� ������� ��������� �������</param>
            <exception cref="T:System.ArgumentException">����� ������� ������� ������, ��� ������
            </exception>
        </member>
        <member name="P:TriadCompiler.IndexedType.IndexCount">
            <summary>
            �������� ����������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.IndexedType.IsValidIndex(System.Int32,System.Int32)">
            <summary>
            �������� �������������� �������� ������� ��� ������������ ���������
            </summary>
            <param name="indexValue">�������� �������</param>
            <param name="indexNumber">���������� ����� �������</param>
            <returns>true, ���� �������� ������� �������� � �������</returns>
        </member>
        <member name="M:TriadCompiler.IndexedType.GetUpperBound(System.Int32)">
            <summary>
            �������� ������� ������� �������
            </summary>
            <param name="indexNumber">���������� ����� �������</param>
            <returns>������� �������</returns>
        </member>
        <member name="M:TriadCompiler.IndexedType.GetEnumerator">
            <summary>
            �������� ������� �� ������� �������� ��������
            </summary>
            <returns></returns>
        </member>
        <member name="T:TriadCompiler.DesignTypeType">
            <summary>
            ��� ���� �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignTypeType.#ctor(System.String,TriadCompiler.DesignTypeCode)">
            <summary>
            �����������
            </summary>
            <param name="typeName">��� ����</param>
            <param name="typeCode">��� ����</param>
        </member>
        <member name="P:TriadCompiler.DesignTypeType.Name">
            <summary>
            ���
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignTypeType.Code">
            <summary>
            ��� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeType.typeName">
            <summary>
            ��� ������-����
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeType.typeCode">
            <summary>
            ��� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.CompilerFacade">
            <summary>
            ����� ��� ���������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.CompilerFacade.designTypeName">
            <summary>
            ��� �������������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.CompilerFacade.showExtendedErrorInfo">
            <summary>
            ���������� �������������� ���������� �� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.CompilerFacade.DesignTypeName">
            <summary>
            ��� �������������� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.CompilerFacade.ShowExtendedErrorInfo">
            <summary>
            ���������� �������������� ���������� �� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.CompilerFacade.NeedClearArea">
            <summary>
            ���������� �������� ������� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.ConfigureCompiler(TriadCompiler.IO,TriadCompiler.CodeBuilderMode,TriadCompiler.Code.Generator.CodeFormat,System.String)">
            <summary>
            ��������� ����������
            </summary>
            <param name="io">����-�����</param>
            <param name="builderMode">����� ����������</param>
            <param name="codeFormat">������ ��������������� ����</param>
            <param name="fileName">��� �����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileModelToTxt(TriadCompiler.IO,System.String)">
             <summary>
             �������������� ������ � ��������� ����
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileModelToDll(TriadCompiler.IO,System.String)">
             <summary>
             �������������� ������ � dll
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileRoutineToTxt(TriadCompiler.IO,System.String)">
             <summary>
             �������������� ������ � ��������� ����
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileRoutineToDll(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ������ � dll
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileStructureToTxt(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ��������� � txt
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileStructureToDll(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ��������� � dll
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIProcedureToTxt(TriadCompiler.IO,System.String)">
             <summary>
             �������������� �������������� ��������� � ��������� ����
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIProcedureToDll(TriadCompiler.IO,System.String)">
            <summary>
            �������������� �������������� ��������� � dll
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIConditionToTxt(TriadCompiler.IO,System.String)">
             <summary>
             �������������� ������� ������������� � ��������� ����
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIConditionToDll(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ������� ������������� � dll
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileDesignToTxt(TriadCompiler.IO,System.String)">
             <summary>
             �������������� ������ � ��������� ����
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileDesignToDll(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ������ � dll
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� ��� ������ � ���� ����</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestModel(TriadCompiler.IO,System.String)">
             <summary>
             �������������� ������
             </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� ����� � �������� �������</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestRoutine(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ������
            </summary>
            <param name="io">����-�����</param>
            <param name="sourceFileName">��� ����� � �������� �������</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestStructure(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ���������
            </summary>
            <param name="io">����-�����</param>
            <param name="sourceFileName">��� ����� � �������� �������</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestIProcedure(TriadCompiler.IO,System.String)">
            <summary>
            �������������� �������������� ���������
            </summary>
            <param name="io">����-�����</param>
            <param name="sourceFileName">��� ����� � �������� �������</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestICondition(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ������� �������������
            </summary>
            <param name="io">����-�����</param>
            <param name="sourceFileName">��� ����� � �������� �������</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestDesign(TriadCompiler.IO,System.String)">
            <summary>
            �������������� ������
            </summary>
            <param name="io">����-�����</param>
            <param name="sourceFileName">��� ����� � �������� �������</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.GetDesignTypeInfo">
            <summary>
            ���������� � ����������� �������
            </summary>
            <returns></returns>
        </member>
        <member name="T:TriadCompiler.ErrorReg">
            <summary>
            ����� �������� �� ����������� ������ � �� ������.
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.ErrorFileName">
            <summary>
            ��� ����� � ������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.MaxErrorCodeNumber">
            <summary>
            ����������� ��������� ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.NoTextForErrorCodeMessage">
            <summary>
            ������ ���������� ��������� �� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.WrongErrorTextFormatMessage">
            <summary>
            �������� ������ ������ � ����� 
            </summary>
        </member>
        <member name="P:TriadCompiler.ErrorReg.ErrorCount">
            <summary>
            ����� ����� ������������������ ������
            </summary>
        </member>
        <member name="M:TriadCompiler.ErrorReg.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Reload">
            <summary>
            ��������
            </summary>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32)">
            <summary>
            ���������������� ������
            </summary>
            <param name="errCode">��� ��������� �� ������</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32,System.String)">
            <summary>
            ���������������� ������ � �������� � ��������� ������������ �����
            </summary>
            <param name="errCode">��� ��������� �� ������</param>
            <param name="additionalText">�������������� ����� ������</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            ���������������� ������ � ������� ��������� ���������� ��������
            </summary>
            <param name="errCode">��� ������</param>
            <param name="allowedEndKeys">��������� ���������� ��������</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32,TriadCompiler.Key[])">
            <summary>
            ���������������� ������ � ������� ��������� ���������� ��������
            </summary>
            <param name="errCode">��� ������</param>
            <param name="keys">��������� ���������� ��������</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.FillErrMessagesList">
            <summary>
            ��������� ������ � ����������� �� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.ErrorReg.PrintAllowedKeys">
            <summary>
            ����������� �������� ��� ��� ��������� ���������� �������� ��� ������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.errorCount">
            <summary>
            ����� ����� ������������������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.printAllowedKeys">
            <summary>
            ����������� �������� ��� ��� ��������� ���������� �������� ��� ������ ������
            </summary>
        </member>
        <member name="T:TriadCompiler.EventArea">
            <summary>
            ���������� ������� ��������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.EventArea.instance">
            <summary>
            ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.EventArea.#ctor">
            <summary>
            �������� �����������
            </summary>
        </member>
        <member name="P:TriadCompiler.EventArea.Instance">
            <summary>
            ��������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.EventArea.ClearEventCallList">
            <summary>
            �������� ��������� ������������������ ��������� � ��������
            </summary>
        </member>
        <member name="M:TriadCompiler.EventArea.RegisterEvent(System.String)">
            <summary>
            ���������������� �������
            </summary>
            <param name="eventName">��� �������</param>
        </member>
        <member name="M:TriadCompiler.EventArea.RegisterEventReference(System.String)">
            <summary>
            ������������� ��������� � �������
            </summary>
            <param name="eventName">��� �������</param>
        </member>
        <member name="M:TriadCompiler.EventArea.CheckEventDefinitions">
            <summary>
            ���������, ��� �� ������� ��������������� � RegisterGraphReference ����
            ����������������� ����� RegisterGraph
            </summary>
        </member>
        <member name="F:TriadCompiler.EventArea.eventCallList">
            <summary>
            ������ ��������������� ���� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.CodeBuilderMode">
            <summary>
            ������ ������ �����������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildModel">
            <summary>
            ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildRoutine">
            <summary>
            ���������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildStructure">
            <summary>
            ���������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildIProcedure">
            <summary>
            ���������� �������������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildICondition">
            <summary>
            ���������� ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildDesign">
            <summary>
            ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestModel">
            <summary>
            ������������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestRoutine">
            <summary>
            ������������ �����
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestStructure">
            <summary>
            ������������ ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestIProcedure">
            <summary>
            ������������ �������������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestICondition">
            <summary>
            ������������ ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestDesign">
            <summary>
            ������������ �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Fabric">
            <summary>
            ������� ��� ������� ��� �������� ������ ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Fabric.#ctor">
            <summary>
            ���������� �����������
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Instance">
            <summary>
            ��������� ������� (��������)
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.IO">
            <summary>
            ������� ����-�����
            </summary>
        </member>
        <member name="M:TriadCompiler.Fabric.ReloadFabric(TriadCompiler.CodeBuilderMode)">
            <summary>
            ����������� ������� ������� ��� ����� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Scanner">
            <summary>
            �������� ������ ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.instance">
            <summary>
            ��������� ����� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.compileMode">
            <summary>
            ������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.currentIO">
            <summary>
            ������� ����-�����
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.err">
            <summary>
            ����������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.scanner">
            <summary>
            ������ ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.parser">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.codeBuilder">
            <summary>
            ����������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.codeGenerator">
            <summary>
            ��������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.ModelCompileFabric">
            <summary>
            ������� ������� ��� ���������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelCompileFabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelCompileFabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.StructureCompileFabric">
            <summary>
            ������� ������� ��� ���������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureCompileFabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureCompileFabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineCompileFabric">
            <summary>
            ������� ������� ��� ���������� �����
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineCompileFabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineCompileFabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.IProcedureCompileFabric">
            <summary>
            ������� ������� ��� ���������� �������������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureCompileFabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureCompileFabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.IConditionCompileFabric">
            <summary>
            ������� ������� ��� ���������� ������� �������������
            </summary>
        </member>
        <member name="P:TriadCompiler.IConditionCompileFabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.IConditionCompileFabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignCompileFabric">
            <summary>
            ������� ������� ��� ���������� �������
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignCompileFabric.Parser">
            <summary>
            �������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignCompileFabric.Builder">
            <summary>
            �������� ����������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.ModelTestFabric">
            <summary>
            ������� ������� ��� ������������ ������
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelTestFabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineTestFabric">
            <summary>
            ������� ������� ��� ������������ �����
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineTestFabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.StructureTestFabric">
            <summary>
            ������� ������� ��� ������������ ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureTestFabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.IProcedureTestFabric">
            <summary>
            ������� ������� ��� ������������ �������������� ��������
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureTestFabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.IConditionTestFabric">
            <summary>
            ������� ������� ��� ������������ ������� �������������
            </summary>
        </member>
        <member name="P:TriadCompiler.IConditionTestFabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignTestFabric">
            <summary>
            ������� ������� ��� ������������ �������
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignTestFabric.ErrReg">
            <summary>
            �������� ����������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignVarType">
            <summary>
            ��� ������� design ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignVarType.#ctor(System.String,TriadCompiler.DesignTypeCode)">
            <summary>
            �����������
            </summary>
            <param name="varName">��� ����������</param>
            <param name="typeCode">��� design ����������</param>
        </member>
        <member name="P:TriadCompiler.DesignVarType.Name">
            
             <summary>
             ���
             </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.TypeCode">
            <summary>
            ��� design ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.Code">
            <summary>
            ��� ���� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarType.code">
            <summary>
            ��� ���� ��������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarType.isSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignVarType.Clone">
            <summary>
            �������������� ���
            </summary>
            <returns>�����</returns>
        </member>
        <member name="F:TriadCompiler.DesignVarType.varName">
            <summary>
            ��� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarType.typeCode">
            <summary>
            ��� ������-����������
            </summary>
        </member>
        <member name="T:TriadCompiler.InputConst">
            <summary>
            ��������� Input
            </summary>
        </member>
        <member name="F:TriadCompiler.InputConst.EndOfFile">
            <summary>
            ��� ����� �����.
            </summary>
        </member>
        <member name="F:TriadCompiler.InputConst.CouldNotReadFileMessage">
            <summary>
            ��������� �� ������ ������ �����
            </summary>
        </member>
        <member name="F:TriadCompiler.InputConst.TabSize">
            <summary>
            ������ ���������, ���������� � ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Input">
            <summary>
            ����� Input �������� �� ����������� �������� �� ����� ������.
            ������ ����� ������ ��������� ��� ������ ���������������� ������� GetLine.
            ��� ������� ������ ���������� null  � ������, ����� ������ ���������.
            </summary>
        </member>
        <member name="M:TriadCompiler.Input.GetLine">
            <summary>
            ���������� ������
            </summary>
            <returns>����������� ������ (null, ���� ������ ������)</returns>
        </member>
        <member name="T:TriadCompiler.InputFile">
            <summary>
            ����� InputFile �������� �� �������� �� ����� ������ �� ������.
            ������ ����� ������ ��������� ��� ������ ������� GetLine.
            ���� ������ � ����� ���������, �� GetLine ���������� null.
            ������������ ����� �������� ��� ��������� �����.
            </summary>
        </member>
        <member name="M:TriadCompiler.InputFile.#ctor(System.String)">
            <summary>
            �����������
            </summary>
            <param name="fileName">��� ��������� �����</param>
        </member>
        <member name="M:TriadCompiler.InputFile.GetLine">
            <summary>
            ���������� ������
            </summary>
            <returns>����������� ������ (null, ���� ������ ������)</returns>
        </member>
        <member name="T:TriadCompiler.IOConst">
            <summary>
            ��������� IO
            </summary>
        </member>
        <member name="F:TriadCompiler.IOConst.MaxErrorCountInLine">
            <summary>
            ������������ ����� ������ � ����� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.IOConst.TooManyErrorsInLineMessage">
            <summary>
            ��������� � ���������� max ����� ������ � ������
            </summary>
        </member>
        <member name="T:TriadCompiler.IO">
            <summary>
            ����� IO - ����������� �����, �������������� ��-���������� ���� ��� ������
            ������� GetCh � ����� ������ ��� ������ ShowError
            </summary>
        </member>
        <member name="M:TriadCompiler.IO.#ctor(TriadCompiler.Input,TriadCompiler.Output)">
            <summary>
            �����������
            </summary>
            <param name="input">����</param>
            <param name="output">�����</param>
        </member>
        <member name="M:TriadCompiler.IO.SetNextString">
            <summary>
            ������ ��������� ������� �� ��������� ������.
            ��������� ��������� �������� ������ ������.
            </summary>
        </member>
        <member name="M:TriadCompiler.IO.GetCh">
            <summary>
            ������������ ����
            </summary>
            <returns>����������� ������</returns>
        </member>
        <member name="M:TriadCompiler.IO.ShowError(System.String)">
            <summary>
            ����� ������
            </summary>
            <param name="message">����� ���������</param>
        </member>
        <member name="P:TriadCompiler.IO.Input">
            <summary>
            ����
            </summary>
        </member>
        <member name="P:TriadCompiler.IO.Output">
            <summary>
            �����
            </summary>
        </member>
        <member name="F:TriadCompiler.IO.output">
            <summary>
            �����, ���������� �� ����� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.IO.input">
            <summary>
            ���� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.IOListing">
            <summary>
            ����� IOListing - �����, �������������� ��-���������� ���� ��� ������
            ������� GetCh � ����� ������ ��� ������ ShowError.
            ��� ���� �� ��������� ������� ���������.
            � ����������� ������ ������ ������������ ������, ���������� ��
            ���� ������ � ������ �������� 
            </summary>
        </member>
        <member name="M:TriadCompiler.IOListing.#ctor(TriadCompiler.Input,TriadCompiler.Output)">
            <summary>
            �����������
            </summary>
            <param name="input">�����, ������� �������� �� ������ ����������</param>
            <param name="output">�������� �� ������ ��������</param>
        </member>
        <member name="M:TriadCompiler.IOListing.SetNextString">
            <summary>
            ������ ��������� ������� �� ��������� ������.
            ��������� ��������� �������� ������ ������.
            </summary>
        </member>
        <member name="M:TriadCompiler.IOListing.GetCh">
            <summary>
            ������������ ����
            </summary>
            <returns>����������� ������</returns>
        </member>
        <member name="M:TriadCompiler.IOListing.ShowError(System.String)">
            <summary>
            ����� ������
            </summary>
            <param name="message">����� ���������</param>
            <exception cref="T:System.ArgumentNullException">
            	<para>�������� ��������� <paramref Name="message"/> ����� <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="M:TriadCompiler.IOListing.PrintAllErrorsInLastLine">
            <summary>
            ���������� ��� ������, ����������� � ��������� ������
            ��������� ����� (��� ����������� �������� PrintError)
            </summary>
        </member>
        <member name="F:TriadCompiler.IOListing.lineNumber">
            <summary>
            ����� ������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.IOListing.linePosition">
            <summary>
            ������� �������� ������� � ��������� ����������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.IOListing.tabCountInCurrLine">
            <summary>
            ����� ��������� � ��������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.ModelParser">
            <summary>
            ������ ������
            </summary>
            <summary>
            ����� ������� ������, ���������� �� ������ ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelParser.codeBuilder">
            <summary>
             ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.ModelParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.ModelParser.Model(TriadCompiler.EndKeyList)">
            <summary>
            �������� ������
            </summary>
            <syntax>Model EndModel</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
        </member>
        <member name="F:TriadCompiler.ModelParser.modelStatementSet">
            <summary>
            ��������� ��������� �������� ��������� � ������
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelParser.StartKeys">
            <summary>
            ��������� ������� ��������� � ������
            </summary>
        </member>
        <member name="M:TriadCompiler.ModelParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            �������� � ������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns> ������������� ��� ��������� ���� </returns>
            <syntax> StructVarDeclaration | StructAssignement | Assignement | IfStatement | WhileStatement |
            ForStatement | DesignTypeConstructor </syntax>
        </member>
        <member name="T:TriadCompiler.OutputConst">
            <summary>
            ��������� Output
            </summary>
        </member>
        <member name="F:TriadCompiler.OutputConst.CouldNotWriteToFileMessage">
            <summary>
            ��������� �� ������ ������ � ����� � ��������� 
            </summary>
        </member>
        <member name="T:TriadCompiler.Output">
            <summary>
            ����� Output �������� �� �������� �� ������ ����������.
            ������ ����� �������� ��������� ��� ������ ������� PrintLine.
            </summary>
        </member>
        <member name="M:TriadCompiler.Output.PrintLine(System.String)">
            <summary>
            ������� �������
            </summary>
            <param name="line">��������� ������</param>
        </member>
        <member name="M:TriadCompiler.Output.Print(System.String)">
            <summary>
            ������� ������� ��� �������� ������
            </summary>
            <param name="line">��������� ������</param>
        </member>
        <member name="T:TriadCompiler.OutputFile">
            <summary>
            ����� OutputFile �������� �� �������� �� ������ ���������� � ����.
            ������ ����� �������� ��������� ��� ������ ������� PrintLine.
            � ����������� ����� �������� ��� �����, ���� ���� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.OutputFile.#ctor(System.String)">
            <summary>
            	<para> ����������� ������ <see cref="T:TriadCompiler.OutputFile"/> .</para>
            </summary>
            <param name="fileName"> ��� ��������� �����
            </param>
        </member>
        <member name="M:TriadCompiler.OutputFile.PrintLine(System.String)">
            <summary>
            ������� �������
            </summary>
            <param name="line"> ��������� ������
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>�������� ��������� <paramref Name="line"/> ����� <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="M:TriadCompiler.OutputFile.Print(System.String)">
            <summary> ������� ������� ��� �������� ������
            </summary>
            <param name="line"> ��������� ������
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>�������� ��������� <paramref Name="line"/> ����� <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="T:TriadCompiler.ConsoleOutput">
            <summary>
            ����� ConsoleOutput �������� �� �������� �� ������ ���������� �� �������.
            ������ ����� �������� ��������� ��� ������ ������� PrintLine.
            � ����������� ����� �������� ��� �����, ���� ���� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.ConsoleOutput.#ctor">
            <summary>
            	<para> ����������� ������ <see cref="T:TriadCompiler.ConsoleOutput"/> .</para>
            </summary>
        </member>
        <member name="M:TriadCompiler.ConsoleOutput.PrintLine(System.String)">
            <summary> ������� �������
            </summary>
            <param name="line"> ��������� ������
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>�������� ��������� <paramref Name="line"/> ����� <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="M:TriadCompiler.ConsoleOutput.Print(System.String)">
            <summary> ������� ������� ��� �������� ������
            </summary>
            <param name="line"> ��������� ������
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>�������� ��������� <paramref Name="line"/> ����� <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="T:TriadCompiler.RoutineCodeBuilder">
            <summary>
            �������� ���� ��� ������
            !!! ��� ����������-����� ����� ������ ������ ��������������� � ������ Reload
            </summary>
        </member>
        <member name="F:TriadCompiler.RoutineCodeBuilder.initialMethod">
            <summary>
            ������� ������������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.CreateInitialMethod">
            <summary>
            ������� ����� DoInitialize
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.SetMessageHandlingEvent(System.CodeDom.CodeStatementCollection)">
            <summary>
            ���������� ������� ��������� ������� ���������
            </summary>
            <param name="statementList">������ ����������</param>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.SetInitialSection(System.CodeDom.CodeStatementCollection)">
            <summary>
            ������ ������ initialSet
            </summary>
            <param name="statementList">������ ����������</param>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.AddVarDefinition(TriadCompiler.IExprType)">
            <summary>
            �������� ���������� ����������
            </summary>
            <param name="varType">��� ����������</param>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.Reload">
            <summary>
            ����������� ������ � ������ ����� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Scanner">
            <summary>
            ����������� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.Reload">
            <summary>
            �������� ��������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.GetSymbolWithSavingPosition">
            <summary>
            �������� ������, �� ������� ������� �������� �������
            </summary>
            <returns>����������� ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.SaveSymbol(TriadCompiler.Symbol)">
            <summary>
            ��������� ������
            </summary>
            <param name="symbol">����������� ������</param>
        </member>
        <member name="M:TriadCompiler.Scanner.GetSymbol">
            <summary>
            �������� ������
            </summary>
            <returns>����������� ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeChar">
            <summary>
            ���������� ��������� ������
            </summary>
            <returns>������������ ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeString">
            <summary>
            ���������� ������ ��������
            </summary>
            <returns>������������ ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeIdentificator(System.Char)">
            <summary>
            ���������� �������������
            </summary>
            <param name="ch">������� ������</param>
            <returns>������������ ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeLeftParOrCommentary">
            <summary>
            ���������� ����������� ��� ����� ������
            </summary>
            <returns>����������� ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeBitString">
            <summary>
            ���������� ������ ���
            </summary>
            <returns>������������ ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeValue(System.Char)">
            <summary>
            ���������� �����
            </summary>
            <returns>������������ ������</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeIntegerValue(System.String)">
            <summary>
            ���������� ����� �����
            </summary>
            <param name="valueStringCode">��������� ������������� �����</param>
            <returns>������ ������ �����</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.StartRecordingCh">
            <summary>
            ������ ������ ������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.GetStoredString">
            <summary>
            �������� ���������� ������������������ ������� ����
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.Scanner.GetCh">
            <summary>
            �������� �����
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.Scanner.SaveCh(System.Char)">
            <summary>
            ��������� ����� ����������������
            </summary>
            <param name="ch">�����</param>
        </member>
        <member name="F:TriadCompiler.Scanner.chStack">
            <summary>
            ���� ���������������� ���� (��� ����� ���������������� ��� ��������� ������ GetSymbol)
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.storedSymbolStack">
            <summary>
            ����������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.needChRecording">
            <summary>
            ������������� � ������ ������� ���� � ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.storedString">
            <summary>
            ������� ���������� ������������������ ������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.currSymbolStr">
            <summary>
            ���������� ������������� �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.recognizedIntegerValues">
            <summary>
            ������� ��� ������������ ����� ����� (����� ��� �����������)
            </summary>
        </member>
        <member name="T:TriadCompiler.CommonParser">
            <summary>
            ���������� �����, ���������� �� �������������� � ������������� ������.
            </summary>
            <summary>
            ��� ����� ������ CommonParser, ���������� �� ������ ����������.
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonParser.currSymbol">
            <summary>
            ������� ������
            </summary>
            <syntax>����������� �������� GetNextKey()</syntax>
        </member>
        <member name="F:TriadCompiler.CommonParser.currKey">
            <summary>
            ��� �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonParser.designTypeName">
            <summary>
            ��� design ����, ���������������� ����������� �����������
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.DesignTypeName">
            <summary>
            ��� design ����, ���������������� ����������� �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ � ��������� ����
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="P:TriadCompiler.CommonParser.err">
            <summary>
            ������ �� ��������� ������ ����������� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.varArea">
            <summary>
            ������ �� ���������� �������� ��������� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.CurrentSymbol">
            <summary>
            ������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.GetNextKey">
            <summary>
            �������� ��������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.SkipTo(TriadCompiler.EndKeyList)">
            <summary>
            ������������ �� ��������� ������ ������� �� ������ ��� ����� �����
            </summary>
            <param name="keyList">��������� ���������� ��������</param>
        </member>
        <member name="M:TriadCompiler.CommonParser.Accept(TriadCompiler.Key)">
            <summary>
            ��������� ����������� �������� ������� ����������
            </summary>
            <syntax>� ������ �������������� �������� ������ � ����� �������</syntax>
            <param name="test_key">��������� ������</param>
        </member>
        <member name="M:TriadCompiler.CommonParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            ���������� ��������
            </summary>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>������������� ��� ��������� ����</returns>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterStandardFuntions">
            <summary>
            ���������������� ����������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterConvertionFunctions">
            <summary>
            ���������������� ������� �������������� �����
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterRandomFunctions">
            <summary>
            ���������������� ������� ��� ������ �� ���������� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterMathFunctions">
            <summary>
            ���������������� �������������� �������
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterSetFunctions">
            <summary>
            ���������������� ������� ��� ��-����
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisteGraphFunction">
            <summary>
            ���������������� ������� ��� ������ � �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err">
            <summary>
            ���� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Lexer">
            <summary>
            ������ ������������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.BitStringIsTooLong">
            <summary>
            ������������ ����� ������ ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongCharFormat">
            <summary>
            �������� ������ ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.NotClosedCommentary">
            <summary>
            ���������� �����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.NotClosedString">
            <summary>
            ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.UnknownChar">
            <summary>
            ����������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongRealFormat">
            <summary>
            �������� ������ ������������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongIntegerFormat">
            <summary>
            �������� ������ ������ �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.NotClosedBitString">
            <summary>
            ���������� ������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongSymbolInBitSTring">
            <summary>
            ������������ ������ � ������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.TooLongBitString">
            <summary>
            ������� ������� ������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser">
            <summary>
            ������ ��������������� � �������������� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type">
            <summary>
            �������� ���
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Var">
            <summary>
            �������� ��� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Unknown">
            <summary>
            ����������� ��� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Var.Need">
            <summary>
            ����� ������ ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.Integer">
            <summary>
            ������ ���� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.IntegerOrReal">
            <summary>
            ��� ��������� ������ ���� ����� ��� ������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.Boolean">
            <summary>
            ��������� ���������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.String">
            <summary>
            ��� ��������� ������ ���� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.BooleanOrBit">
            <summary>
            ��� ��������� ������ ���� ���������� ��� �������
            </summary> 
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Var.WrongType">
            <summary>
            ������������ � ���� ��������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InSimpleExpr">
            <summary>
            ������������� ���� � ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InAssign">
            <summary>
            ������������� ���� � ��������� assign
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InPlus">
            <summary>
            ������������ ���� � �������� +
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InOrAnd">
            <summary>
            ������������ ���� � �������� Or/And
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InStarSlash">
            <summary>
            ������������ ���� � �������� Star/Slash
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InResidueOfDivision">
            <summary>
            ������������ ���� � �������� Residue of division (������� �� �������)
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InArrow">
            <summary>
            ������������ ���� � �������� ARROW
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.NotCompatibleDimensionArrayInAssign">
            <summary>
            ������ ����� �������� �����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InReturn">
            <summary>
            ������������ ���� ��� �������� �������� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Polus">
            <summary>
            �������� ��� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Polus.Need">
            <summary>
            ����� ������ ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Polus.Need.Output">
            <summary>
            ��� ������ ������ ���� Output
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Polus.Need.Input">
            <summary>
            ��� ������ ������ ���� Input
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Value">
            <summary>
            ������������ ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Value.Need">
            <summary>
            ����� ������ ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.Constant">
            <summary>
            ������ ���� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.NotNegative">
            <summary>
            ��������� ������ ���� ���������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.Positive">
            <summary>
            ��� � ����� for ������ ���� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.NotConstant">
            <summary>
            �������� ��������� �� ������ ���� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage">
            <summary>
            �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.WrongMinusUsage">
            <summary>
            �������� ������������ ����� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DeclaredAgain">
            <summary>
            ������ � ����� ������ ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NotDeclared">
            <summary>
            ������ � ����� ������ �� ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedNotIndexed">
            <summary>
            ������������� ���������������� ���� �� �����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedSpyObject">
            <summary>
            ��������� spy-������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedRange">
            <summary>
            ���������� ������� �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedNotRange">
            <summary>
            ��������� �������� �� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedNotSet">
            <summary>
            ���-��������� ����� �����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedIndexedOrSet">
            <summary>
            ��������� ������ ��� ��-��
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.UnableToCastType">
            <summary>
            ��� ��������� �� ����� ���� �������� � ���������� ����
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Polus">
            <summary>
            �������� ������������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Polus.LowIndexIsGreaterThanTopInRange">
            <summary>
            ������ ������� ��������� ����������� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Event">
            <summary>
            �������� ������������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Event.NotDeclared">
            <summary>
            ��������� � ������������ ����� �������
            </summary> 
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Event.DeclaredAgain">
            <summary>
            ������� � ����� ������ ��� ���� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.DesignVar">
            <summary>
            �������� ������������� design ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DesignVar.NotCompatibleWithDesignType">
            <summary>
            ��� design ���������� �� ������������� ���� design ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DesignVar.NotExpectedTypeCode">
            <summary>
            ����������� ��� design ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.DesignType">
            <summary>
            ��������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DesignType.NotDeclared">
            <summary>
            ��������� ��� � ����� ������ ������ �� ���
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.IProcedure">
            <summary>
            �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.IProcedure.NoReturnedValue">
            <summary>
            �� �� ����������� �������� ��������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.ParameterList">
            <summary>
            ������ ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.ParameterList.NotEnoughParameters">
            <summary>
            ������� �� ��� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.ParameterList.TooManyParameters">
            <summary>
            ������� ������ ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Array">
            <summary>
            �������� ������������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.VarIsNotArray">
            <summary>
            ���������� �� �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.LostIndex">
            <summary>
            ������� �� ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.TooManyIndexes">
            <summary>
            ������� ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.ArrayIsNotVar">
            <summary>
            ��� �� ��������������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.OutOfArrayBound">
            <summary>
            ������ ������� �� ���������� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.For">
            <summary>
            �������� ������������� ����� for
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.For.InitExprIsGreaterThanTerminal">
            <summary>
            �������� ���������� ��������� � ����� for to ������ ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.For.InitExprIsLowerThanTerminal">
            <summary>
            �������� ���������� ��������� � ����� for downto ������ ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Foreach">
            <summary>
            �������� ������������� ����� foreach
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Foreach.IncompatibleTypes">
            <summary>
            ��� ����������-�������� � ���������/������� �� ���������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Context">
            <summary>
            ������������ ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Context.Case">
            <summary>
            �������� �������� Case
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Context.VarDeclaration">
            <summary>
            ������������ �������� ���������� ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.WrongStartSymbol">
            <summary>
            �������� ��������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Routine">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Type">
            <summary>
            ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.PolusDeclaration">
            <summary>
            ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.PolusDeclarationName">
            <summary>
            ��� ������ � ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.VarDeclarationName">
            <summary>
            ��� ���������� � ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.SimpleFactor">
            <summary>
            ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Statement">
            <summary>
            ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.EventDeclarationName">
            <summary>
            ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Structure">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.StuctVarDeclaration">
            <summary>
            ���������� ����������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.StructFactor">
            <summary>
            ����������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.DesignVarDeclaration">
            <summary>
            ���������� design ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.NodeDeclaration">
            <summary>
            ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Connection">
            <summary>
            ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.StructConstant">
            <summary>
            ����������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.IncludeSection">
            <summary>
            ������ include
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Model">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.HeaderName">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.FunctionParameterList">
            <summary>
            ������ ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.IProcedure">
            <summary>
            �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.ICondition">
            <summary>
            ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.SpyObjectDeclaration">
            <summary>
            ���������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.ObjectReference">
            <summary>
            ������ �� ������ ��� �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.IPCaseCondition">
            <summary>
            ������� � ��������� case ��
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Design">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.SpyObject">
            <summary>
            Spy-������
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.WrongEndSymbol">
            <summary>
            �������� �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Type">
            <summary>
            ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.PolusDeclarationName">
            <summary>
            ��� ������ � ��� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.InitialPart">
            <summary>
            ������ �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Event">
            <summary>
            �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Constant">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.VarDeclarationName">
            <summary>
            ��� ���������� � ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Statement">
            <summary>
            ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.PolusVarIndex">
            <summary>
            ������ ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ExprInPar">
            <summary>
            ��������� � �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Routine">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.EventDeclarationName">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Structure">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.NodeDeclaration">
            <summary>
            ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.DesignVarDeclaration">
            <summary>
            ���������� design ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.SingleHeader">
            <summary>
            ��������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.StructConstant">
            <summary>
            ����������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Connection">
            <summary>
            ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.IncludeSection">
            <summary>
            ������ include
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Model">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.HeaderName">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.FunctionParameterList">
            <summary>
            ������ ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Handling">
            <summary>
            ������ ��������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Processing">
            <summary>
            ������ �������������� ��������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.IProcedure">
            <summary>
            �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ICondition">
            <summary>
            ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ObjectReference">
            <summary>
            ������ �� ������ ��� �������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Design">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ConstantSet">
            <summary>
            ����������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Generator.InvalidFileName">
            <summary>
            �������� ��� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Generator.Compilation">
            <summary>
            ������ ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.IConditionType">
            <summary>
            ��� ������� �������������
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionType.#ctor(System.String)">
            <summary>
            �����������
            </summary>
            <param name="conditionName">��� ������� �������������</param>
        </member>
        <member name="P:TriadCompiler.IConditionType.ReturnCode">
            <summary>
            ������������ �������� (������ - �.�. � ������� ������������� ��� ���)
            </summary>
        </member>
        <member name="T:TriadCompiler.IProcedureType">
            <summary>
            ���, ����������� �������������� ���������
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureType.#ctor(System.String)">
            <summary>
            �����������
            </summary>
            <param name="typeName">��� ����</param>
        </member>
        <member name="M:TriadCompiler.IProcedureType.#ctor(System.String,TriadCompiler.TypeCode)">
            <summary>
            �����������
            </summary>
            <param name="typeName">��� ����</param>
            <param name="returnedType">����������� ��������</param>
        </member>
        <member name="P:TriadCompiler.IProcedureType.ReturnCode">
            <summary>
            ��� ���� ����������
            ��� �������� ���������������� � IConditionType
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureType.Name">
            <summary>
            ���
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureType.Description">
            <summary>
            ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.returnedType">
            <summary>
            ��� ���� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.typeName">
            <summary>
            ��� ��
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.description">
            <summary>
            ��� �� � ����
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.OutVarList">
            <summary>
            ������ out-����������
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.ParamVarList">
            <summary>
            ������ ���������� ��
            </summary>
        </member>
        <member name="T:TriadCompiler.ISpyType">
            <summary>
            ��������� ���� spy-�������
            </summary>
        </member>
        <member name="P:TriadCompiler.ISpyType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="T:TriadCompiler.IPolusType">
            <summary>
            ���������, ������� ��������� ���� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.PolusArrayType">
            <summary>
            ��� ���������������� ������
            </summary>
        </member>
        <member name="M:TriadCompiler.PolusArrayType.#ctor(System.Boolean,System.Boolean)">
            <summary>
            �����������
            </summary>
            <param name="isInput">������� ����, ��� ��� ������ Input</param>
            <param name="isOutput">������� ����, ��� ��� ������ Output</param>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.IsInput">
            <summary>
            �������� ����, ��� ��� ������ - Input
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.IsOutput">
            <summary>
            �������� ����, ��� ��� ������ - Output
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.Name">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.polusName">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.isInput">
            <summary>
            ������� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.isOutput">
            <summary>
            ������� ��������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.isSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="T:TriadCompiler.ParameterList`1">
            <summary>
            ����������������� ���
            </summary>
            <typeparam name="ItemType">��� ��������</typeparam>
        </member>
        <member name="M:TriadCompiler.ParameterList`1.AddParameter(`0)">
            <summary>
            �������� ��������
            </summary>
            <param name="paramType">��� ���������</param>
        </member>
        <member name="M:TriadCompiler.ParameterList`1.AddParameterList(System.Collections.Generic.List{`0})">
            <summary>
            �������� ������ ����������
            </summary>
            <param name="paramTypeList">������ ����� ����������</param>
        </member>
        <member name="M:TriadCompiler.ParameterList`1.GetEnumerator">
            <summary>
            �������� ������� ����������
            </summary>
            <returns></returns>
        </member>
        <member name="P:TriadCompiler.ParameterList`1.ParameterCount">
            <summary>
            ����� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.ParameterList`1.paramList">
            <summary>
            ������ ����������
            </summary>
        </member>
        <member name="T:TriadCompiler.PolusType">
            <summary>
            ��� ����������� �������.
            </summary>
        </member>
        <member name="M:TriadCompiler.PolusType.#ctor(System.Boolean,System.Boolean)">
            <summary>
            �����������
            </summary>
            <param name="isInput">������� ����, ��� ��� ������ Input</param>
            <param name="isOutput">������� ����, ��� ��� ������ Output</param>
        </member>
        <member name="M:TriadCompiler.PolusType.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            �����������
            </summary>
            <param name="isInput">������� ����, ��� ��� ������ Input</param>
            <param name="isOutput">������� ����, ��� ��� ������ Output</param>
            <param name="isSpyObject">������� spy-�������</param>
        </member>
        <member name="P:TriadCompiler.PolusType.IsInput">
            <summary>
            �������� ����, ��� ��� ������ - Input
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.IsOutput">
            <summary>
            �������� ����, ��� ��� ������ - Output
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.Name">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.polusName">
            <summary>
            ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.isInput">
            <summary>
            ������� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.isOutput">
            <summary>
            ������� ��������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.isSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineParser">
            <summary>
            �����, ���������� �� ������ �����
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineParser.codeBuilder">
            <summary>
            ��������� ����
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            ������ ������ � ��������� ����
            </summary>
            <param name="endKey">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.Routine(TriadCompiler.EndKeyList)">
            <summary>
            ������
            </summary>
            <syntax>Routine Identificator { [ ParameterList ]( Interface ) } { InitialPart } 
            EventPart { EventPart } EndRoutine</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.InitialPart(TriadCompiler.EndKeyList)">
            <summary>
            ��������� �������
            </summary>
            <syntax>Initial StatementList EndInitial</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.EventPart(TriadCompiler.EndKeyList)">
            <summary>
            �������� �������
            </summary>
            <syntax>Event [Identificator]; StatementList EndEvent</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.EventName(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext@)">
            <summary>
            ��� �������
            </summary>
            <syntax>Identificator | �����</syntax>
            <param name="endKeys">��������� ���������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>��� ������� 
            "" - ���� ������� �������������
            null - ���� ���� ������</returns>
        </member>
        <member name="F:TriadCompiler.RoutineParser.routineStatementSet">
            <summary>
            ��������� ��������� �������� ��������� � ������
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineParser.StartKeys">
            <summary>
            ��������� ������� ��������� � ������
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            ���������� ��������
            </summary>
            <syntax>����� | Assignement | IfStatement | VariableDeclaration |
            WhileStatement | ForStatement | caseStatement | sheduleStatement |
            outStatement | cancelStatement | interlockStatement | availableStatement |
            writeStatement</syntax>
            <param name="endKeys">��������� �������� ��������</param>
            <param name="context">������� ��������</param>
            <returns>������������� ��� ��������� ���� (=null, ���� ��� ������ ��������)</returns>
        </member>
        <member name="T:TriadCompiler.Key">
            <summary>
            ���� ������. ��������� �������� � ��������� ��������� ������� ����,
            ��� ��� ����� �� ���� ����� ������ ���� "������ ���� ������..." 
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Identificator">
            <summary>
            ������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Star">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Slash">
            <summary>
            �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Equal">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Comma">
            <summary>
            �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Semicolon">
            <summary>
            ����� � �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Colon">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Point">
            <summary>
            �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Power">
            <summary>
            ���������� � �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.LeftPar">
            <summary>
            ������������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RightPar">
            <summary>
            ������������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.LeftBracket">
            <summary>
            ������������� ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RightBracket">
            <summary>
            ������������� ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Later">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Greater">
            <summary>
            ������
            </summary> 
        </member>
        <member name="F:TriadCompiler.Key.LaterEqual">
            <summary>
            ������ ��� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.GreaterEqual">
            <summary>
            ������ ��� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.NotEqual">
            <summary>
            �� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Plus">
            <summary>
            ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Minus">
            <summary>
            �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Not">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Or">
            <summary>
            ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.And">
            <summary>
            �
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Assign">
            <summary>
            ������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Connection">
            <summary>
            ����������� ����������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.StringValue">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.LeftFigurePar">
            <summary>
            ����� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RightFigurePar">
            <summary>
            ������ �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.ResidueOfDivision">
            <summary>
            ������� �� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.IntegerValue">
            <summary>
            ����� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.BooleanValue">
            <summary>
            ���������� ��������� (true ��� false)
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RealValue">
            <summary>
            ������������ �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.CharValue">
            <summary>
            ������ (�����)
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.BitStringValue">
            <summary>
            ������ ��� 
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndOfFile">
            <summary>
            ��� ����� ����� 
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Routine">
            <summary>
            ������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndRoutine">
            <summary>
            ����� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.In">
            <summary>
            �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Initial">
            <summary>
            ������ ������ initialSet
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndInitial">
            <summary>
            ����� ������ initialSet
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Event">
            <summary>
            ������ ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndEvent">
            <summary>
            ����� ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Then">
            <summary>
            ����� ������� � ��������� if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Do">
            <summary>
            ������ ������ �������� ��������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndWhile">
            <summary>
            ����� ����� while
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndFor">
            <summary>
            ����� ����� for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.To">
            <summary>
            ����������� ����������� � ����� for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndCase">
            <summary>
            ����� ��������� case
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Of">
            <summary>
            ������������ �������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.By">
            <summary>
            ��� � ����� for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndIf">
            <summary>
            ����� ��������� ��������� if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Through">
            <summary>
            �������� ������� � ��������� ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndStructure">
            <summary>
            ����� ���������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Define">
            <summary>
            ������ ���� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Be">
            <summary>
            �������� ���� ����������� ��������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.From">
            <summary>
            �������� ����� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndModel">
            <summary>
            ����� �������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.On">
            <summary>
            �������� ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndInf">
            <summary>
            ����� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndCond">
            <summary>
            ����� �������� ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndHandling">
            <summary>
            ����� ������ ��������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndProcessing">
            <summary>
            ����� ������ �������������� ��������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndDesign">
            <summary>
            ����� design
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DownTo">
            <summary>
            ����������� �������� � ����� for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Array">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Available">
            <summary>
            ��������������� ������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Boolean">
            <summary>
            ���������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Bit">
            <summary>
            ������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Break">
            <summary>
            �������� break � ��������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Cancel">
            <summary>
            ������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Case">
            <summary>
            �������� case
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Char">
            <summary>
            ���������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Else">
            <summary>
            ������ ��������������� ����� ���������� � if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.For">
            <summary>
            ������ ����� for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.If">
            <summary>
            ������ ��������� if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Input">
            <summary>
            ������� ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Output">
            <summary>
            �������� ��� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Integer">
            <summary>
            ������������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Interlock">
            <summary>
            ������������ �������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Notype">
            <summary>
            ������������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Out">
            <summary>
            �������� ������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Real">
            <summary>
            ������������ ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Shedule">
            <summary>
            �������� ������������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.String">
            <summary>
            ��������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.While">
            <summary>
            ������ ��������� while
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Print">
            <summary>
            ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Structure">
            <summary>
            ������ ���������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Node">
            <summary>
            ���������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Polus">
            <summary>
            ���������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.InOut">
            <summary>
            ������������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Arc">
            <summary>
            ���������� ����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Edge">
            <summary>
            ���������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.UndirectCycle">
            <summary>
            ���� - �������������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DirectCycle">
            <summary>
            ���� - ������������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.UndirectPath">
            <summary>
            ���� - �������������� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DirectPath">
            <summary>
            ���� - ������������ �������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.UndirectStar">
            <summary>
            ���� - �������������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DirectStar">
            <summary>
            ���� - ������������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Include">
            <summary>
            ������ Include
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Model">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.IProcedure">
            <summary>
            �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.SimCondition">
            <summary>
            ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Design">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Let">
            <summary>
            ����������� ��������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Simulate">
            <summary>
            �������� ������ �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Put">
            <summary>
            �������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Handling">
            <summary>
            ������ ������ ��������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Processing">
            <summary>
            ������ ������ �������������� ��������� �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Passive">
            <summary>
            ��������� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Eor">
            <summary>
            �������� ��������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Set">
            <summary>
            ���������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Foreach">
            <summary>
            �������� �������� ��������� ��-��
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Nil">
            <summary>
            ������ ������
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Graph">
            <summary>
            ���������� �����
            </summary>
        </member>
        <member name="T:TriadCompiler.KeyIdentificatorContainer">
            <summary>
            ��������� �������� ���������������
            </summary>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.#cctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.FillKeyIdentificatorTable">
            <summary>
            ��������� ������� �������� ���������������
            </summary>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.Contains(System.String)">
            <summary>
            ���������, ���� �� ������������� � ������ �������� ���������������
            </summary>
            <param name="keyIdentificatorStringCode">��������� �������� ��������������</param>
            <returns>True, ���� ��������</returns>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.GetKeyIdentificator(System.String)">
            <summary>
            �������� ��� ��������� �������������
            </summary>
            <param name="keyIdentificatorStringCode">��������� �������� ��������������</param>
            <returns>��� ��������� ��������������</returns>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.TransformIdentificatorStringCode(System.String)">
            <summary>
            ��������������, ������������ ��� ���� ���������������
            </summary>
            <param name="identificatorStringCode">��������� �������� ��������������</param>
            <returns>����������� ��������� �������� ��������������</returns>
        </member>
        <member name="F:TriadCompiler.KeyIdentificatorContainer.keyIdentificatorTable">
            <summary>
            ������� �������� ���������������
            </summary>
        </member>
        <member name="T:TriadCompiler.BitStringSymbol">
            <summary>
            Информация о  битовой строке.
            </summary>
            <syntax>Значение у поля indexStringCode должно быть BitStringValue</syntax>
        </member>
        <member name="F:TriadCompiler.BitStringSymbol.value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="M:TriadCompiler.BitStringSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.BitStringSymbol.Value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="T:TriadCompiler.BooleanSymbol">
             <summary>
            Информация о логической константе (true или false)
             </summary>
             <syntax>Значение у поля indexStringCode должно быть BitStringValue</syntax>
        </member>
        <member name="F:TriadCompiler.BooleanSymbol.value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="M:TriadCompiler.BooleanSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.BooleanSymbol.#ctor(System.Boolean)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.BooleanSymbol.Value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="T:TriadCompiler.CharSymbol">
            <summary>
            Информация о  символьной константе.
            </summary>
            <syntax>Значение у поля indexStringCode должно быть CharValue</syntax>
        </member>
        <member name="M:TriadCompiler.CharSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="F:TriadCompiler.CharSymbol.value">
            <summary>
            Символьное значение символа
            </summary>
        </member>
        <member name="P:TriadCompiler.CharSymbol.Value">
            <summary>
            Символьное значение символа
            </summary>
        </member>
        <member name="T:TriadCompiler.IdentSymbol">
            <summary>
            Информация об идентификаторе.
            Значение у поля indexStringCode должно быть Identificator
            </summary>
        </member>
        <member name="M:TriadCompiler.IdentSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.IdentSymbol.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="name">Имя</param>
        </member>
        <member name="P:TriadCompiler.IdentSymbol.Name">
            <summary>
            Строковое значение символа 
            </summary>
        </member>
        <member name="T:TriadCompiler.IntegerSymbol">
            <summary>
            Информация о целой константе.
            </summary>
            <syntax>Значение поля indexStringCode должно быть IntegerValue</syntax>
        </member>
        <member name="F:TriadCompiler.IntegerSymbol.value">
            <summary>
            Целое значение символа
            </summary> 
        </member>
        <member name="M:TriadCompiler.IntegerSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.IntegerSymbol.Value">
            <summary>
            Целое значение символа
            </summary> 
        </member>
        <member name="T:TriadCompiler.NilSymbol">
            <summary>
            Пустой символ nil
            </summary>
        </member>
        <member name="M:TriadCompiler.NilSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="T:TriadCompiler.RealSymbol">
            <summary>
            Информация о вещественной константе.
            </summary>
            <syntax>Значение поля indexStringCode должно быть RealValue</syntax>
        </member>
        <member name="F:TriadCompiler.RealSymbol.value">
            <summary>
            Вещественное значение символа
            </summary> 
        </member>
        <member name="M:TriadCompiler.RealSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.RealSymbol.Value">
            <summary>
            Вещественное значение символа
            </summary> 
        </member>
        <member name="T:TriadCompiler.StringSymbol">
            <summary>
            Информация о строковой константе.
            </summary>
            <syntax>Значение поля indexStringCode всегда StringValue</syntax>
        </member>
        <member name="M:TriadCompiler.StringSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.StringSymbol.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="value">Значение</param>
        </member>
        <member name="P:TriadCompiler.StringSymbol.Code">
            <summary>
            Код символа
            </summary>
            <Name>Code</Name>
        </member>
        <member name="P:TriadCompiler.StringSymbol.Value">
            <summary>
            Строковое значение символа 
            </summary>
        </member>
        <member name="T:TriadCompiler.Symbol">
            <summary>
            ���������� � �������.
            </summary>
        </member>
        <member name="M:TriadCompiler.Symbol.#ctor">
            <summary>
            �����������
            </summary>
        </member>
        <member name="P:TriadCompiler.Symbol.Code">
            <summary>
            ��� �������
            </summary>
            <Name>Code</Name>
        </member>
        <member name="F:TriadCompiler.Symbol.code">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.IOTest">
            <summary>
            ��� ������������
            </summary>
        </member>
        <member name="M:TriadCompiler.IOTest.#ctor(TriadCompiler.Input,TriadCompiler.Output)">
            <summary>
            �����������
            </summary>
            <param name="input">�����, ������� �������� �� ������ ����������</param>
            <param name="output">�������� �� ������ ��������</param>
        </member>
        <member name="M:TriadCompiler.IOTest.SetNextString">
            <summary>
            ������ ��������� ������� �� ��������� ������.
            ��������� ��������� �������� ������ ������.
            </summary>
        </member>
        <member name="M:TriadCompiler.IOTest.GetCh">
            <summary>
            ������������ ����
            </summary>
            <returns>����������� ������</returns>
        </member>
        <member name="M:TriadCompiler.IOTest.TestError(System.UInt32)">
            <summary>
            �������������� ������ (��������� �������� �� ���)
            </summary>
            <param name="errorCode">��� ������</param>
        </member>
        <member name="F:TriadCompiler.IOTest.recognizedErrorCodeList">
            <summary>
            ������� ��� ������������ ����� ����� (����� ��� �����������)
            </summary>
        </member>
        <member name="T:TriadCompiler.TestConst">
            <summary>
            ��������� Test
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.RoutineTestFileList">
            <summary>
            ����, ���������� ������ ������ � �������� ������ � ������ � ������ ������ ��� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.StructureTestFileList">
            <summary>
            ����, ���������� ������ ������ � �������� ������ � ������ � ������ ������ ��� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.ModelTestFileList">
            <summary>
            ����, ���������� ������ ������ � �������� ������ � ������ � ������ ������ ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.IProcedureFileList">
            <summary>
            ����, ���������� ������ ������ � �������� ������ � ������ � ������ ������ ��� ���. ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.IConditionFileList">
            <summary>
            ����, ���������� ������ ������ � �������� ������ � ������ � ������ ������ ��� ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.CanNotReadTestFileListMessage">
            <summary>
            ��������� �� ������ �������� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.WrongFormatErrorMessage">
            <summary>
            ��������� � �������� ������� ���� ��������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.ErrorWasNotExpectedMessage">
            <summary>
            ��������� � ����������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.ExpectedErrorIsMissing">
            <summary>
            ��������� �� ���������� ��������� ������
            </summary>
        </member>
        <member name="T:TriadCompiler.ObjectForTesting">
            <summary>
            ��������� ������� ������������
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Structure">
            <summary>
            ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Routine">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Model">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.InfProcedure">
            <summary>
            �������������� ���������
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.SimCondition">
            <summary>
            ������� �������������
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Design">
            <summary>
            ������
            </summary>
        </member>
        <member name="T:TriadCompiler.Test">
            <summary>
            ������������ ��� ������������
            </summary>
        </member>
        <member name="M:TriadCompiler.Test.Start(TriadCompiler.ObjectForTesting)">
            <summary>
            ������ ������������
            </summary>
            <param name="objectForTesting">������ ��� ������������</param>
        </member>
        <member name="T:TriadCompiler.Test.TestMethod">
            <summary>
            ������� ������������
            </summary>
            <param name="io">����-�����</param>
            <param name="fileName">��� �����</param>
        </member>
        <member name="M:TriadCompiler.Test.DoTestList(System.String,TriadCompiler.Test.TestMethod)">
            <summary>
            ��������� ������ ������
            </summary>
            <param name="testListFileName">��� ����� � �������</param>
            <param name="testMethod">����� ������������</param>
        </member>
        <member name="T:TriadCompiler.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TriadCompiler.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TriadCompiler.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TriadCompiler.Properties.Resources.ErrMessages">
             <summary>
               Looks up a localized string similar to 1 Здесь должен быть идентификатор
            5 Здесь должен быть символ  &quot;,&quot; (запятая)
            6 Здесь должен быть символ  &quot;;&quot; (точка с запятой)
            7 Здесь должен быть символ  &quot;:&quot; (двоеточие)
            8 Здесь должен быть символ  &quot;.&quot; (точка)
            10 Здесь должен быть символ  &quot;(&quot; (левая круглая скобка)
            11 Здесь должен быть символ  &quot;)&quot; (правая круглая скобка)
            12 Здесь должен быть символ  &quot;[&quot; (левая квадратная скобка)
            13 Здесь должен быть символ  &quot;]&quot; (правая квадратная скобка)
            17 Здесь должен быть символ  &quot;&gt;&quot; (правая угловая скобка)
            26  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:TriadCompiler.VarArrayType">
            <summary>
            ��� ��������.
            </summary>
        </member>
        <member name="M:TriadCompiler.VarArrayType.#ctor(TriadCompiler.TypeCode)">
            <summary>
            �����������
            </summary>
            <param name="typeCode">��� �������� ����</param>
        </member>
        <member name="M:TriadCompiler.VarArrayType.#ctor(TriadCompiler.TypeCode,System.String)">
            <summary>
            �����������
            </summary>
            <param name="typeCode">��� �������� ����</param>
            <param name="varName">��� ����������</param>
        </member>
        <member name="P:TriadCompiler.VarArrayType.Code">
            <summary>
            ��� ���� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.VarArrayType.Name">
            <summary>
            ��� ���������� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.VarArrayType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="M:TriadCompiler.VarArrayType.Clone">
            <summary>
            ������� �����
            </summary>
            <returns></returns>
        </member>
        <member name="F:TriadCompiler.VarArrayType.varName">
            <summary>
            ��� �������
            </summary>
        </member>
        <member name="F:TriadCompiler.VarArrayType.isSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="F:TriadCompiler.VarArrayType.code">
            <summary>
            ��� �������� ���� �������
            </summary>
        </member>
        <member name="T:TriadCompiler.VarType">
            <summary>
            ��� ����������� ����������.
            </summary>
        </member>
        <member name="M:TriadCompiler.VarType.#ctor(TriadCompiler.TypeCode)">
            <summary>
            �����������
            </summary>
            <param name="code">��� ����</param>
        </member>
        <member name="M:TriadCompiler.VarType.#ctor(TriadCompiler.TypeCode,System.String)">
            <summary>
            �����������
            </summary>
            <param name="code">��� ����</param>
            <param name="varName">��� ����������</param>
        </member>
        <member name="M:TriadCompiler.VarType.#ctor(TriadCompiler.TypeCode,System.String,System.Boolean)">
            <summary>
            �����������
            </summary>
            <param name="code">��� ����</param>
            <param name="varName">��� ����������</param>
            <param name="isSpyObject">������� spy-�������</param>
        </member>
        <member name="P:TriadCompiler.VarType.Code">
            <summary>
            ��� ���� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.VarType.Name">
            <summary>
            ��� ���������� ����������
            </summary>
        </member>
        <member name="P:TriadCompiler.VarType.IsSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="M:TriadCompiler.VarType.Clone">
            <summary>
            ������� �����
            </summary>
            <returns></returns>
        </member>
        <member name="F:TriadCompiler.VarType.varName">
            <summary>
            ��� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.VarType.code">
            <summary>
            ��� ���� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.VarType.isSpyObject">
            <summary>
            ������� spy-�������
            </summary>
        </member>
        <member name="T:TriadCompiler.TestErrorReg">
            <summary>
            ����� ��� ��������� ������������������ ������ � ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.TestErrorReg.Register(System.UInt32)">
            <summary>
            ����������� ������
            </summary>
            <param name="errCode">��� ������</param>
        </member>
        <member name="M:TriadCompiler.TestErrorReg.Register(System.UInt32,System.String)">
            <summary>
            ����������� ������
            </summary>
            <param name="errCode">��� ������</param>
            <param name="additionalText">�������������� �����</param>
        </member>
        <member name="M:TriadCompiler.TestErrorReg.Register(System.UInt32,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            ����������� ������, ��������� � ����������� ��������
            </summary>
            <param name="errCode">��� ������</param>
            <param name="allowedEndKeys">���������� �������� �������</param>
        </member>
        <member name="T:TriadCompiler.IExprType">
            <summary>
            ��������� ���� ���������
            </summary>
        </member>
        <member name="P:TriadCompiler.IExprType.Code">
            <summary>
            ��� ���� ����������
            </summary>
        </member>
        <member name="M:TriadCompiler.IExprType.Clone">
            <summary>
            �������������� ���
            </summary>
            <returns>�����</returns>
        </member>
        <member name="T:TriadCompiler.TypeCode">
            <summary>
            ���� ����� ����������
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.String">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Integer">
            <summary>
            ����� �����
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Boolean">
            <summary>
            ���������� ��������
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Char">
            <summary>
            ������
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Real">
            <summary>
            ������������ �����
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Bit">
            <summary>
            ������� ������
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.UndefinedType">
            <summary>
            �������������� ���
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Void">
            <summary>
            ������ ���
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Node">
            <summary>
            �������
            </summary>
        </member>
    </members>
</doc>
